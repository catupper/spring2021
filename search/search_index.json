{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u30cf\u30c3\u30ab\u30bd\u30f32021\u6625 \u81ea\u5206\u306e\u9078\u3093\u3060\u30c6\u30fc\u30de\u306b\u5fdc\u3058\u3066\u3001Web\u30c6\u30ad\u30b9\u30c8\u3092\u8aad\u307f\u9032\u3081\u3066\u3044\u3063\u3066\u304f\u3060\u3055\u3044\u3002 Processing\u306e\u5fdc\u7528 Processing\u306e\u5fdc\u7528\u3092\u9078\u3093\u3060\u65b9\u306f\u3001\u4ee5\u4e0b\u306e\u5916\u90e8\u30b5\u30a4\u30c8\u306b\u6559\u6750\u304c\u3042\u308b\u306e\u3067\u3001\u305d\u3061\u3089\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 https://qnighy.info/kkai2016-summer/ ID: kkai password: Xe8oocue \u8a00\u8a9e\u51e6\u7406\u7cfb,\u8a08\u7b97\u56f0\u96e3\u554f\u984c \u8a00\u8a9e\u51e6\u7406\u7cfb\u3084\u8a08\u7b97\u56f0\u96e3\u554f\u984c\u3092\u30c6\u30fc\u30de\u306b\u9078\u3093\u3060\u65b9\u306f\u3001\u4e0a\u306e\u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u304b\u3089\u81ea\u5206\u306e\u9078\u3093\u3060\u30c6\u30fc\u30de\u306e\u6559\u6750\u307e\u3067\u30b8\u30e3\u30f3\u30d7\u3057\u3066\u304f\u3060\u3055\u3044 \\[ 1 + 2 = 3 \\]","title":"Home"},{"location":"#2021","text":"\u81ea\u5206\u306e\u9078\u3093\u3060\u30c6\u30fc\u30de\u306b\u5fdc\u3058\u3066\u3001Web\u30c6\u30ad\u30b9\u30c8\u3092\u8aad\u307f\u9032\u3081\u3066\u3044\u3063\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u30cf\u30c3\u30ab\u30bd\u30f32021\u6625"},{"location":"#processing","text":"Processing\u306e\u5fdc\u7528\u3092\u9078\u3093\u3060\u65b9\u306f\u3001\u4ee5\u4e0b\u306e\u5916\u90e8\u30b5\u30a4\u30c8\u306b\u6559\u6750\u304c\u3042\u308b\u306e\u3067\u3001\u305d\u3061\u3089\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 https://qnighy.info/kkai2016-summer/ ID: kkai password: Xe8oocue","title":"Processing\u306e\u5fdc\u7528"},{"location":"#_1","text":"\u8a00\u8a9e\u51e6\u7406\u7cfb\u3084\u8a08\u7b97\u56f0\u96e3\u554f\u984c\u3092\u30c6\u30fc\u30de\u306b\u9078\u3093\u3060\u65b9\u306f\u3001\u4e0a\u306e\u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u304b\u3089\u81ea\u5206\u306e\u9078\u3093\u3060\u30c6\u30fc\u30de\u306e\u6559\u6750\u307e\u3067\u30b8\u30e3\u30f3\u30d7\u3057\u3066\u304f\u3060\u3055\u3044 \\[ 1 + 2 = 3 \\]","title":"\u8a00\u8a9e\u51e6\u7406\u7cfb,\u8a08\u7b97\u56f0\u96e3\u554f\u984c"},{"location":"hard_computing/","text":"\u8a08\u7b97\u56f0\u96e3\u554f\u984c \u8a08\u7b97\u56f0\u96e3\u554f\u984c\u3068\u306f \u8a08\u7b97\u56f0\u96e3\u554f\u984c(hard computing problem)\u306f\u3001\u8a08\u7b97\u306b\u3068\u3066\u3082\u6642\u9593\u304c\u304b\u304b\u308b\u554f\u984c\u3067\u3042\u308b\u3002 \u307e\u305a\u306f\u3001\u8a08\u7b97\u306b\u304b\u304b\u308b\u6642\u9593\u3068\u3044\u3046\u6982\u5ff5\u3092\u3082\u3046\u5c11\u3057\u53b3\u5bc6\u306b\u6271\u3046\u305f\u3081\u306b\u3001\u8a08\u7b97\u91cf\u3068\u3044\u3046\u6982\u5ff5\u3092\u8aac\u660e\u3057\u3088\u3046\u3002 \u8a08\u7b97\u91cf \u8a08\u7b97\u91cf\u3068\u3044\u3046\u306e\u306f\u3001\u3042\u308b\u554f\u984c\u3092\u89e3\u304f\u3068\u304d\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u5b9f\u884c\u3059\u308b\u8a08\u7b97\u306e\u56de\u6570\u3092\u793a\u3059\u91cf\u3067\u3042\u308b\u3002 \u4f8b\u3048\u30701\u304b\u3089100\u307e\u3067\u306e\u6574\u6570\u306e\u7dcf\u548c\u3092\u6c42\u3081\u308b\u3068\u3057\u3088\u3046\u3002 \u6700\u3082\u5358\u7d14\u306a\u65b9\u6cd5\u3068\u3057\u3066\u3001\u7d20\u76f4\u306b99\u56de\u8db3\u3057\u7b97\u3092\u884c\u3046\u65b9\u6cd5\u304c\u3042\u308b\u3002\u6587\u5b57\u901a\u308a99\u56de\u306e\u8a08\u7b97\u304c\u884c\u308f\u308c\u308b\u3002 \u305d\u308c\u306b\u5bfe\u3057\u3066\u3001\u7b49\u5dee\u6570\u5217\u306e\u548c\u306e\u516c\u5f0f((\u521d\u9805 + \u672b\u9805)\u00d7\u9805\u6570 \u00f72)\u3092\u5229\u7528\u3059\u308c\u3070\u3001\u305f\u304b\u3060\u304b3\u56de\u306e\u8a08\u7b97\u3067\u7dcf\u548c\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 \u3082\u3057\u3053\u308c\u304c100\u307e\u3067\u3067\u306f\u306a\u304f\u3066 \\(n\\) \u307e\u3067\u3060\u3068\u3057\u305f\u3089\u3069\u3046\u306a\u308b\u3060\u308d\u3046\u304b\u3002 \u7d20\u76f4\u306b\u5168\u90e8\u8db3\u3057\u5408\u308f\u305b\u308b\u65b9\u6cd5\u3060\u3068\u8a08\u7b97\u56de\u6570\u306f \\(n-1\\) \u56de\u306b\u306a\u308a\u3001\u516c\u5f0f\u3092\u4f7f\u3046\u5834\u5408\u3060\u3068\u3001\u3069\u3093\u306a \\(n\\) \u306b\u5bfe\u3057\u3066\u30823\u56de\u3068\u306a\u308b\u3002 \u3053\u306e \\(n-1\\) \u3084 \\(3\\) \u304c\u305d\u308c\u305e\u308c\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u8a08\u7b97\u91cf\u3067\u3042\u308b\u3002 \u8a08\u7b97\u91cf\u3092\u8868\u3059\u969b\u306f\u7d30\u304b\u3044\u6570\u5b57\u3088\u308a\u3001\u6700\u3082\u652f\u914d\u7684\u306a\u9805\u3060\u3051\u3092\u629c\u304d\u51fa\u3059\u305f\u3081\u306b\u3001 \\(\\Theta\\) \u8a18\u6cd5\u3084 \\(O\\) \u8a18\u6cd5\u3092\u4f7f\u3046\u3002 \u0398\u8a18\u6cd5,O\u8a18\u6cd5 \u0398\u8a18\u6cd5 \u306f\u95a2\u6570\u306e\u7a2e\u985e\u3092\u8868\u3059\u8a18\u6cd5\u3067\u3042\u308b\u3002 \\(f(x) = \\Theta(g(x))\\) \u3068\u66f8\u304f\u3053\u3068\u306b\u3088\u3063\u3066\u3001 \\(f(x)\\) \u306f \\(g(x)\\) \u3068\u540c\u7b49\u306e\u30b9\u30b1\u30fc\u30eb\u3067\u5927\u304d\u304f\u306a\u308b\u95a2\u6570\u3060\u3001\u3068\u3044\u3046\u3053\u3068\u3092\u8868\u3059\u3002\u3053\u3053\u3067\u3001\u300c\u540c\u7b49\u306e\u30b9\u30b1\u30fc\u30eb\u300d\u3068\u3044\u3046\u306e\u306f\u3001 \\(x\\) \u3092\u7121\u9650\u306b\u5927\u304d\u304f\u3057\u3066\u3044\u3063\u305f\u6642\u306b\u3001 \\(f(x)\\) \u3068 \\(g(x)\\) \u306e\u6bd4\u304c \\(0\\) \u306b\u53ce\u675f\u305b\u305a\u3001\u307e\u305f\u6709\u308b\u5b9a\u6570\u3092\u8d85\u3048\u308b\u3053\u3068\u304c\u306a\u3044\u3001\u3068\u3044\u3046\u3053\u3068\u3092\u8868\u3059\u3002 \u4ee5\u4e0b\u306e\u4f8b\u3092\u898b\u3066\u3001 \\(\\Theta\\) \u8a18\u6cd5\u306e\u30a4\u30e1\u30fc\u30b8\u3092\u63b4\u3093\u3067\u6b32\u3057\u3044\u3002 \\(x^2+2x+4 = \u0398(x^2)\\) \\(500x^3 + 10x- 2000000 + 1/x = \u0398(x^3)\\) \\((x+4)^10 = \u0398(x^{10})\\) \\(2^x + x^3 = \u0398(2^x)\\) \\(0.8^x + x^3 - \\sin(x) = \u0398(x^3)\\) O\u8a18\u6cd5 \u306f\u03a9\u8a18\u6cd5\u306e\u4ef2\u9593\u3067\u3042\u308b\u3002 \\(f(x) = O(g(x))\\) \u3068\u66f8\u304f\u3053\u3068\u306b\u3088\u3063\u3066\u3001 \\(f(x)\\) \u306f \\(g(x)\\) \u3068\u540c\u7b49\u304b\u305d\u308c\u3088\u308a\u5c0f\u3055\u3044\u30b9\u30b1\u30fc\u30eb\u3067\u5927\u304d\u304f\u306a\u308b\u3053\u3068\u3092\u8868\u3059\u3002 \\(f(x) < h(x), h(x) = \u0398(g(x))\\) \u3068\u306a\u308b \\(h(x)\\) \u304c\u5b58\u5728\u3059\u308b\u306a\u3089\u3001 \\(f(x)=O(g(x))\\) \u3067\u3042\u308b\u3002 \u0398\u8a18\u6cd5\u304c\u300c\u30a4\u30b3\u30fc\u30eb\u300d\u306b\u5bfe\u5fdc\u3059\u308b\u306a\u3089\u3001O\u8a18\u6cd5\u306f\u300c\u5c0f\u306a\u308a\u30a4\u30b3\u30fc\u30eb\u300d\u306b\u5bfe\u5fdc\u3059\u308b\u3068\u8003\u3048\u3066\u3082\u3089\u3063\u3066\u826f\u3044\u3002 \u591a\u9805\u5f0f\u6642\u9593\u3001\u6307\u6570\u6642\u9593 \u3042\u308b\u7a2e\u985e\u306e\u554f\u984c\u3092\u89e3\u304f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u3001\u554f\u984c\u306b\u51fa\u3066\u304f\u308b\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba\u306b\u5bfe\u3057\u3066\u3069\u308c\u304f\u3089\u3044\u306e\u8a08\u7b97\u91cf\u304c\u304b\u304b\u308b\u304b\u3001\u3068\u3044\u3046\u306e\u304c\u8a08\u7b97\u6a5f\u79d1\u5b66\u306e\u8208\u5473\u3067\u3042\u308b\u3002 \u305f\u3068\u3048\u3070\u3001\u300c\u6574\u6570\u304cN\u500b\u4e0e\u3048\u3089\u308c\u3066\u3001\u305d\u306e\u7dcf\u548c\u3092\u6c42\u3081\u308b\u611a\u76f4\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u8a08\u7b97\u91cf\u306f \\(O(N)\\) \u3067\u3042\u308b\u300d\u3068\u304b\u300c\u6574\u6570\u304cN\u500b\u4e0e\u3048\u3089\u308c\u3066\u3001\u548c\u304c0\u306b\u306a\u308b3\u3064\u7d44\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u306f \\(O(N^2)\\) \u306e\u8a08\u7b97\u91cf\u3067\u5224\u5b9a\u3067\u304d\u308b\u300d\u3068\u3044\u3046\u3075\u3046\u306b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u8a08\u7b97\u91cf\u3092\u8b70\u8ad6\u3059\u308b\u3002 \u3042\u308b\u554f\u984c\u3092\u89e3\u304f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u3001\u554f\u984c\u306e\u30b5\u30a4\u30baN\u306b\u5bfe\u3057\u3066\u3001\u3042\u308b\u591a\u9805\u5f0ff(N)\u304c\u5b58\u5728\u3057\u3066\u3001 \\(O(f(N))\\) \u306e\u6642\u9593\u3067\u52d5\u4f5c\u3059\u308b\u3068\u304d\u3001\u305d\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f \u591a\u9805\u5f0f\u6642\u9593\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 \u3068\u547c\u3076\u3002 \u307e\u305f\u3001 \\(f(N)\\) \u304c\u6307\u6570\u95a2\u6570\u306e\u6642\u306f \u6307\u6570\u6642\u9593\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 \u3068\u547c\u3076\u3002 \u8a08\u7b97\u56f0\u96e3\u554f\u984c \u3053\u308c\u304b\u3089\u6271\u3063\u3066\u3044\u304f\u8a08\u7b97\u56f0\u96e3\u554f\u984c\u306f\u3001 \u6307\u6570\u6642\u9593\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 \u306f\u898b\u3064\u304b\u3063\u3066\u3044\u308b\u304c\u3001 \u591a\u9805\u5f0f\u6642\u9593\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 \u306f\u898b\u3064\u304b\u3063\u3066\u3044\u306a\u3044\u3001\u3042\u308b\u3044\u306f\u7121\u3044\u3068\u4e88\u60f3\u3055\u308c\u3066\u3044\u308b\u554f\u984c\u3067\u3042\u308b\u3002 \u4ee3\u8868\u7684\u306a\u554f\u984c\u3068\u3057\u3066\u5145\u8db3\u53ef\u80fd\u6027\u554f\u984c(SAT)\u3084\u5de1\u56de\u30bb\u30fc\u30eb\u30b9\u30de\u30f3\u554f\u984c(TSP)\u306a\u3069\u304c\u3042\u308b\u3002 \u307e\u305a\u306f\u3001\u591a\u9805\u5f0f\u6642\u9593\u3067\u306f\u89e3\u3051\u306a\u3044\u3068\u3055\u308c\u3066\u3044\u308b\u554f\u984c\u306e\u4e2d\u3067\u3082\u7279\u306b\u6709\u540d\u306a \u5de1\u56de\u30bb\u30fc\u30eb\u30b9\u30de\u30f3\u554f\u984c \u3092\u898b\u3066\u3044\u3053\u3046\u3002 \u5de1\u56de\u30bb\u30fc\u30eb\u30b9\u30de\u30f3\u554f\u984c \u5de1\u56de\u30bb\u30fc\u30eb\u30b9\u30de\u30f3\u554f\u984c(travelling salesman problem)\u3068\u306f\u4ee5\u4e0b\u306e\u5f62\u5f0f\u306e\u554f\u984c\u3067\u3042\u308b\u3002 \u300c \\(N\\) \u500b\u306e\u8857\u304c\u3042\u308b\u3002 \\(i\\) \u756a\u76ee\u306e\u8857\u3068 \\(j\\) \u756a\u76ee\u306e\u8857\u306f\u8ddd\u96e2 \\(d_{i,j}\\) \u306e\u9053\u3067\u7d50\u3070\u308c\u3066\u3044\u308b\u30020\u756a\u76ee\u306e\u8857\u304b\u3089\u958b\u59cb\u3057\u3066\u3001\u5168\u3066\u306e\u8857\u3092\u3061\u3087\u3046\u30691\u56de\u305a\u3064\u901a\u3063\u3066\u3082\u3046\u4e00\u5ea6\uff100\u76ee\u306e\u8857\u306b\u5e30\u3063\u3066\u304f\u308b\u30eb\u30fc\u30c8\u306e\u3046\u3061\u3001\u7dcf\u79fb\u52d5\u8ddd\u96e2\u304c\u6700\u5c0f\u306e\u3082\u306e\u3092\u6c42\u3081\u3088\u3002\u300d \u307e\u305a\u306f\u3053\u306e\u554f\u984c\u306e\u69d8\u3005\u306a\u89e3\u6cd5\u3092\u5b9f\u88c5\u3057\u3066\u901f\u3055\u3092\u6bd4\u3079\u3066\u307f\u3088\u3046\u3002 \u5165\u529b\u5f62\u5f0f \u3053\u306e\u5148\u3001\u5de1\u56de\u30bb\u30fc\u30eb\u30b9\u30de\u30f3\u554f\u984c\u3092\u89e3\u304f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u3044\u304f\u3064\u304b\u7d39\u4ecb\u3057\u3001\u5b9f\u88c5\u3082\u3059\u308b\u3002\u305d\u308c\u306b\u3042\u305f\u3063\u3066\u3001\u3069\u306e\u3088\u3046\u306a\u5f62\u5f0f\u3067\u554f\u984c\u304c\u4e0e\u3048\u3089\u308c\u308b\u304b\u3092\u6c7a\u3081\u3066\u304a\u304b\u306a\u3044\u3068\u4e0d\u4fbf\u3067\u3042\u308b\u3002 \u5168\u3066\u306e\u5b9f\u88c5\u306b\u304a\u3044\u3066\u3001\u6a19\u6e96\u5165\u529b\u304b\u3089\u3001\u4ee5\u4e0b\u306e\u5f62\u5f0f\u3067\u554f\u984c\u3092\u53d7\u3051\u53d6\u308b\u3068\u3044\u3046\u3053\u3068\u306b\u3059\u308b\u3002 N d_0,0 d_0,1 d_0,2 .. d_0,N-1 d_1,0 d_1,1 d_1,2 .. d_1,N-1 : d_N-1,0 d_N-1,1 d_N-1,2 .. d_N-1,N-1 \u3064\u307e\u308a\u3001\u6700\u521d\u306e1\u884c\u306b\u306f\u5de1\u56de\u3059\u308b\u8857\u306e\u500b\u6570\u304c\u66f8\u304b\u308c\u3066\u304a\u308a\u3001\u7d9a\u304f \\(N\\) \u884c\u306b\u306f\u305d\u308c\u305e\u308c \\(N\\) \u500b\u306e\u6570\u5b57\u304c\u66f8\u304b\u308c\u3066\u304a\u308a\u3001 \\(i\\) \u884c \\(j\\) \u5217\u76ee\u306f\u8857 \\(i\\) \u3068\u8857 \\(j\\) \u306e\u8ddd\u96e2\u304c\u66f8\u304b\u308c\u3066\u3044\u308b\u3002 \u307e\u305f\u3001\u4ee5\u4e0b\u306e\u5236\u7d04\u3082\u8ab2\u3059\u3053\u3068\u306b\u3059\u308b\u3002 \\(d_{i,j}\\) \u306f\u975e\u8ca0\u6574\u6570 \\(d_{i,i} = 0\\) i\u3068j\u306e\u8ddd\u96e2\u306fj\u3068i\u306e\u8ddd\u96e2\u3068\u7b49\u3057\u3044 \u5165\u529b\u3084\u7b54\u3048\u306f \\(10^{10}\\) \u3092\u8d85\u3048\u306a\u3044 \u4ee5\u4e0b\u306b\u5165\u529b\u3092\u53d7\u3051\u53d6\u3063\u3066\u3001\u4e8c\u6b21\u5143\u914d\u5217d\u306b\u5404\u8857\u306e\u9593\u306e\u8ddd\u96e2\u3092\u683c\u7d0d\u3059\u308b\u95a2\u6570\u306epython\u3067\u306e\u5b9f\u884c\u3092\u6319\u3052\u308b\u3002\u4ed6\u306e\u8a00\u8a9e\u3092\u4f7f\u3063\u3066\u3044\u308b\u4eba\u306f\u9069\u5b9c\u5b9f\u88c5\u3057\u306a\u304a\u3057\u3066\u307b\u3057\u3044\u3002 def read (): n = int ( input ()) d = [] for i in range ( n ): d . append ( list ( map ( int , input () . split ()))) return d \u3053\u306e\u90e8\u5206\u306f\u3069\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3082\u4f7f\u7528\u3059\u308b\u306e\u3067\u3001\u3069\u3053\u304b\u306b\u5225\u540d\u3067\u4fdd\u5b58\u3057\u3066\u304a\u304f\u3068\u826f\u3044\u3060\u308d\u3046\u3002 \u5168\u63a2\u7d22 \u307e\u305a\u306f\u3001\u6700\u3082\u30b7\u30f3\u30d7\u30eb\u306a\u5168\u63a2\u7d22\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u898b\u3066\u3044\u3053\u3046\u3002\u3053\u308c\u306f\u8857\u3092\u3081\u3050\u308b\u9806\u5e8f\u3092\u5168\u901a\u308a\u8a66\u3059\u3068\u3044\u3046\u3082\u306e\u3067\u3042\u308b\u3002 0\u756a\u76ee\u4ee5\u5916\u306e\u8857\u3092\u4f55\u3089\u304b\u306e\u9806\u756a\u30671\u56de\u305a\u3064\u901a\u308b\u30eb\u30fc\u30c8\u306f\u5168\u90e8\u3067 \\((N-1)!\\) \u901a\u308a\u3042\u308b\u3002\u3046\u307e\u3044\u5177\u5408\u306b\u3053\u308c\u3089\u3092\u5217\u6319\u3057\u3066\u3001\u305d\u306e\u4e2d\u3067\u6700\u3082\u8ddd\u96e2\u304c\u77ed\u3044\u3082\u306e\u3092\u8fd4\u305b\u3070\u3001\u5de1\u56de\u30bb\u30fc\u30eb\u30b9\u30de\u30f3\u554f\u984c\u306f\u89e3\u3051\u308b\u3002 \u30eb\u30fc\u30c8\u3092\u4e00\u3064\u6c7a\u3081\u305f\u3068\u304d\u3001\u305d\u306e\u30eb\u30fc\u30c8\u306e\u7dcf\u79fb\u52d5\u8ddd\u96e2\u306f \\(O(N)\\) \u3067\u6c42\u307e\u308b\u306e\u3067\u3001\u3053\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u8a08\u7b97\u91cf\u306f \\(O(N!)\\) \u3068\u306a\u308b\u3002\u3053\u308c\u306f\u6307\u6570\u6642\u9593\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\u3089\u306a\u304f\u3001\u3068\u3066\u3082\u9045\u3044\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u306a\u308b\u304c\u3001\u5b9f\u88c5\u306f\u7c21\u5358\u3067\u3001\u6b63\u5f53\u6027\u304c\u660e\u3089\u304b\u306a\u306e\u3067\u3001\u8a66\u3057\u306b\u5b9f\u88c5\u3059\u308b\u306b\u306f\u3061\u3087\u3046\u3069\u3088\u3044\u3002 \u4ee5\u4e0b\u306b\u5168\u63a2\u7d22\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u6319\u3052\u308b\u3002 INF = 10 ** 10 #\u7121\u9650\u5927\u306e\u4ee3\u308f\u308a def distance ( route , d ): ret = 0 for i in range ( len ( route ) - 1 ): ret += d [ route [ i ]][ route [ i + 1 ]] return ret def next_permutation ( l ): n = len ( l ) i = n - 2 while i >= 0 and l [ i ] >= l [ i + 1 ]: i -= 1 if i == - 1 : return False j = i + 1 while j < n and l [ j ] > l [ i ]: j += 1 j -= 1 l [ i ], l [ j ] = l [ j ], l [ i ] left = i + 1 right = n - 1 while left < right : l [ left ], l [ right ] = l [ right ], l [ left ] left += 1 right -= 1 return True def solve ( n , d ): route = list ( range ( 1 , n )) min_dist = INF min_route = None while True : tmp = distance ([ 0 ] + route + [ 0 ], d ) if tmp < min_dist : min_dist = tmp min_route = route [:] if not next_permutation ( route ): break print ( \"dist\" , min_dist ) print ( \"route\" , [ 0 ] + min_route + [ 0 ]) def main (): n , d = read () solve ( n , d ) main () next_permutation(l) \u95a2\u6570\u306f\u30ea\u30b9\u30c8l\u3092\u53d7\u3051\u53d6\u3063\u3066\u3001l\u3092\u3072\u3068\u3064\u6b21\u306e\u9806\u5217\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\u3067\u3042\u308b\u3002\u623b\u308a\u5024\u306f\u3001\u5909\u63db\u306b\u6210\u529f\u3057\u305f\u304b\u3069\u3046\u304b\u3067\u3042\u308b\u3002 \uff4c\u3092\u6607\u9806\u306b\u30bd\u30fc\u30c8\u3055\u308c\u305f\u30ea\u30b9\u30c8\u3068\u3057\u3066\u3001 next_permutation(l) \u306b\u9806\u6b21\u304b\u3051\u3066\u3044\u304f\u3068\u3001\u5168\u3066\u306e\u9806\u5217\u3092\u7d4c\u7531\u3057\u305f\u5f8c\u306b\u3001\u964d\u9806\u306b\u30bd\u30fc\u30c8\u3055\u308c\u3066\u7d42\u4e86\u3059\u308b\u3002 next_permutation \u306e\u5b9f\u88c5\u306f\u3068\u3066\u3082\u96e3\u89e3\u306a\u306e\u3067\u3001\u3088\u304f\u8aad\u3093\u3067\u7406\u89e3\u3057\u3088\u3046\u3002 \u5b9f\u88c5\u304c\u3067\u304d\u305f\u3089\u8a66\u3057\u306b\u3001\u4ee5\u4e0b\u306e\u5165\u529b\u3067\u52d5\u4f5c\u3092\u78ba\u8a8d\u3059\u308b\u3068\u826f\u3044\u3002 4 0 1 1 2 1 0 2 3 1 2 0 4 2 3 4 0 \u3046\u307e\u304f\u52d5\u3051\u3070\u4ee5\u4e0b\u306e\u30eb\u30fc\u30c8\u304c\u5f97\u3089\u308c\u308b\u306f\u305a\u3060 dist 8 route [0, 2, 1, 3, 0] \u52d5\u7684\u8a08\u753b\u6cd5 \u5168\u63a2\u7d22\u3092\u3059\u308b\u3068\u3001\u8a08\u7b97\u91cf\u304c\u6307\u6570\u3069\u3053\u308d\u304b\u968e\u4e57\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u3001\u3068\u3066\u3082\u9045\u3044\u3002\u307e\u305a\u306f\u4ee3\u8868\u7684\u306a\u6307\u6570\u6642\u9593\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3042\u308b\u52d5\u7684\u8a08\u753b\u6cd5\u3092\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3046\u3002 \u52d5\u7684\u8a08\u753b\u6cd5\u306e\u30a2\u30a4\u30c7\u30a2\u306f\u3001\u300c\u9802\u70b90\u304b\u3089\u51fa\u767a\u3057\u3066\u3001\u9802\u70b9\u96c6\u5408V\u3092\u7d4c\u7531\u3057\u3001\u9802\u70b9i\u306b\u6765\u308b\u3068\u304d\u306e\u6700\u77ed\u7d4c\u8def\u3092\u6c42\u3081\u308b\u300d\u3068\u3044\u3046\u90e8\u5206\u554f\u984c\u3092\u89e3\u304f\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\u3002 \u4e0a\u306e\u30ab\u30ae\u30ab\u30c3\u30b3\u3067\u56f2\u307e\u308c\u305f\u90e8\u5206\u306e\u7b54\u3048\u3068\u306a\u308b\u5024\u3092dp[V][i]\u3068\u3057\u3088\u3046\u3002\u3053\u306e\u3068\u304di\u306fV\u306b\u542b\u307e\u308c\u308b\u3068\u3059\u308b\u3002 V\u304b\u3089i\u3092\u53d6\u308a\u9664\u3044\u305f\u9802\u70b9\u96c6\u5408\u3092W\u3068\u3057\u3088\u3046\u3002\u3059\u308b\u3068 \\(dp[V][i] = min_{j \\in W} {dp[W][j] + d[j][i]}\\) \u304c\u3001\u6210\u7acb\u3059\u308b\u3002\u3053\u308c\u306fi\u306b\u8a2a\u308c\u308b\u4e00\u3064\u524d\u306e\u9802\u70b9\u306b\u3064\u3044\u3066\u5168\u63a2\u7d22\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u306a\u308b\u3002 V\u306e\u30b5\u30a4\u30ba\u304c\u5c0f\u3055\u3044\u9806\u306bdp\u914d\u5217\u3092\u57cb\u3081\u3066\u3044\u3051\u3070\u3001\u5168\u3066\u306e\u8981\u7d20\u304cO(N)\u3067\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 dp\u914d\u5217\u306e\u30b5\u30a4\u30ba\u306fO(N2^N)\u306a\u306e\u3067\u3001\u5168\u90e8\u3067O(N^2 2^N)\u3067\u3053\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u52d5\u4f5c\u3059\u308b\u3002 \u4ee5\u4e0b\u306b\u305d\u306e\u5b9f\u88c5\u3092\u793a\u3059\u3002 INF = 10 ** 10 #\u7121\u9650\u5927\u306e\u4ee3\u308f\u308a def solve ( n , d ): dp = [[ INF ] * n for i in range ( 1 << n )] dp [ 1 ][ 0 ] = 0 for v in range ( 2 , 1 << n ): for i in range ( 1 , n ): if ( v & ( 1 << i )) == 0 : continue for j in range ( n ): if i == j or ( v & ( 1 << j )) == 0 : continue dp [ v ][ i ] = min ( dp [ v ][ i ], dp [ v - ( 1 << i )][ j ] + d [ j ][ i ]) res = INF for i in range ( 1 , n ): res = min ( res , dp [( 1 << n ) - 1 ][ i ] + d [ i ][ 0 ]) print ( \"dist\" , res ) def main (): n , d = read () solve ( n , d ) main () \u3053\u308c\u3082\u3001\u5168\u63a2\u7d22\u306b\u3042\u308b\u5165\u529b\u4f8b\u3067\u52d5\u4f5c\u78ba\u8a8d\u3092\u3059\u308b\u3068\u826f\u3044\u3060\u308d\u3046\u3002 \u6f14\u7fd2 \u4e0a\u306e\u5b9f\u88c5\u3067\u306f\u6700\u77ed\u7d4c\u8def\u306e\u8ddd\u96e2\u3057\u304b\u8868\u793a\u3055\u308c\u306a\u3044\u3002\u305d\u306e\u8ddd\u96e2\u3092\u5b9f\u73fe\u3059\u308b\u6700\u77ed\u7d4c\u8def\u3082\u4e00\u7dd2\u306b\u8868\u793a\u3059\u308b\u3088\u3046\u306b\u6539\u5909\u3057\u3066\u307f\u3088\u3002 (Hint:dp[V][i]\u304c\u6700\u5f8c\u306b\u66f4\u65b0\u3055\u308c\u305f\u6642\u306ej\u3092\u899a\u3048\u3066\u304a\u304f\u3068\u826f\u3044) \u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u554f\u984c \u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u554f\u984c(Knapsack problem)\u3068\u306f\u4ee5\u4e0b\u306e\u5f62\u5f0f\u306e\u554f\u984c\u3067\u3042\u308b\u3002 \u300c \\(N\\) \u500b\u306e\u304a\u83d3\u5b50\u3068\u91cd\u91cf\u5236\u9650 \\(W\\) \u306e\u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u304c\u3042\u308b\u3002 \\(i\\) \u756a\u76ee\u306e\u304a\u83d3\u5b50\u306e\u4fa1\u5024\u306f \\(V_i\\) \u3067\u91cd\u3055\u306f \\(W_i\\) \u3067\u3042\u308b\u3002\u91cd\u3055\u306e\u7dcf\u548c\u304c \\(W\\) \u3092\u8d85\u3048\u306a\u3044\u3088\u3046\u306b\u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u306b\u304a\u83d3\u5b50\u3092\u8a70\u3081\u8fbc\u3080\u3068\u304d\u3001\u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u306e\u4e2d\u306e\u304a\u83d3\u5b50\u306e\u4fa1\u5024\u306e\u7dcf\u548c\u3092\u6700\u5927\u5316\u305b\u3088\u3002\u300d \u3053\u306e\u554f\u984c\u3082\u5168\u63a2\u7d22\u3068\u3001\u52d5\u7684\u8a08\u753b\u6cd5\u3067\u89e3\u3044\u3066\u307f\u3088\u3046\u3002 \u5165\u529b\u5f62\u5f0f \u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u554f\u984c\u306f\u3001\u5168\u3066\u306e\u5b9f\u88c5\u306b\u304a\u3044\u3066\u3001\u6a19\u6e96\u5165\u529b\u304b\u3089\u3001\u4ee5\u4e0b\u306e\u5f62\u5f0f\u3067\u554f\u984c\u3092\u53d7\u3051\u53d6\u308b\u3068\u3044\u3046\u3053\u3068\u306b\u3059\u308b\u3002 N\u3000W v_0 w_0 v_1 w_1 : v_N-1 w_N-1 \u3064\u307e\u308a\u3001\u6700\u521d\u306e1\u884c\u306b\u306f\u30b9\u30ca\u30c3\u30af\u306e\u500b\u6570\u304c\u66f8\u304b\u308c\u3066\u304a\u308a\u3001\u7d9a\u304f \\(N\\) \u884c\u306b\u306f\u305d\u308c\u305e\u308c \\(i\\) \u756a\u76ee\u306e\u30b9\u30ca\u30c3\u30af\u306e\u4fa1\u5024\u3068\u91cd\u3055\u304c\u66f8\u304b\u308c\u3066\u3044\u308b\u3002 \u307e\u305f\u3001\u4ee5\u4e0b\u306e\u5236\u7d04\u3082\u8ab2\u3059\u3053\u3068\u306b\u3059\u308b\u3002 \\(v_i, w_i\\) \u306f\u975e\u8ca0\u6574\u6570 \u5165\u529b\u3084\u7b54\u3048\u306f \\(10^{18}\\) \u3092\u8d85\u3048\u306a\u3044 \u4ee5\u4e0b\u306b\u5165\u529b\u3092\u53d7\u3051\u53d6\u3063\u3066\u3001\u4e8c\u6b21\u5143\u914d\u5217d\u306b\u5404\u8857\u306e\u9593\u306e\u8ddd\u96e2\u3092\u683c\u7d0d\u3059\u308b\u95a2\u6570\u306epython\u3067\u306e\u5b9f\u884c\u3092\u6319\u3052\u308b\u3002\u4ed6\u306e\u8a00\u8a9e\u3092\u4f7f\u3063\u3066\u3044\u308b\u4eba\u306f\u9069\u5b9c\u5b9f\u88c5\u3057\u306a\u304a\u3057\u3066\u307b\u3057\u3044\u3002 def read (): n , W = map ( int , input () . split ()) vs = [] ws = [] for i in range ( n ): v , w = map ( int , input () . split ()) vs . append ( v ) ws . append ( w ) return n , W , vs , ws \u3053\u306e\u90e8\u5206\u306f\u3069\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3082\u4f7f\u7528\u3059\u308b\u306e\u3067\u3001\u3069\u3053\u304b\u306b\u5225\u540d\u3067\u4fdd\u5b58\u3057\u3066\u304a\u304f\u3068\u826f\u3044\u3060\u308d\u3046\u3002 \u5168\u63a2\u7d22\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 \u307e\u305a\u306f\u3001\u3069\u306e\u304a\u83d3\u5b50\u3092\u4f7f\u3063\u3066\u3001\u3069\u306e\u304a\u83d3\u5b50\u3092\u4f7f\u308f\u306a\u3044\u304b\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5168\u901a\u308a\u8a66\u3059\u5168\u63a2\u7d22\u3092\u5b9f\u88c5\u3057\u3088\u3046\u3002 \u304a\u83d3\u5b50\u306e\u7d44\u307f\u5408\u308f\u305b\u306f\u5de1\u56de\u30bb\u30fc\u30eb\u30b9\u30de\u30f3\u554f\u984c\u3068\u540c\u69d8\u306b\u4e8c\u9032\u6570\u3092\u4f7f\u3063\u3066\u8868\u305d\u3046\u3002 def brute_force ( n , W , vs , ws ): ans = 0 snacks = 0 for i in range ( 1 << n ): vsum = 0 wsum = 0 used = [] for j in range ( n ): if ( i & ( 1 << j )) == 0 : continue vsum += vs [ j ] wsum += ws [ j ] used . append ( j ) if wsum > W : continue if ans < vsum : ans = vsum snacks = used [:] print ( \"value\" , ans ) print ( \"snacks\" , snacks ) def main (): n , w , vs , ws = read () brute_force ( n , w , vs , ws ) main () \u3053\u306e\u524d\u63a2\u7d22\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u3001i\u306b\u95a2\u3059\u308bfor\u6587\u304c \\(O(2^N)\\) \u56de\u30eb\u30fc\u30d7\u3057\u3001\u4e2d\u306ej\u306b\u95a2\u3059\u308bfor\u6587\u304c \\(O(N)\\) \u56de\u30eb\u30fc\u30d7\u3059\u308b\u306e\u3067\u3001 \\(O(NN^2)\\) \u306e\u8a08\u7b97\u91cf\u3067\u3042\u308b\u3002 \u3053\u308c\u306f\u6307\u6570\u6642\u9593\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3042\u308b\u3002 \u5b9f\u88c5\u304c\u3067\u304d\u305f\u3089\u8a66\u3057\u306b\u3001\u4ee5\u4e0b\u306e\u5165\u529b\u3067\u52d5\u4f5c\u3092\u78ba\u8a8d\u3059\u308b\u3068\u826f\u3044\u3002 5 8 7 2 11 3 11 3 13 4 28 7 \u52d5\u7684\u8a08\u753b\u6cd5 \u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u554f\u984c\u306b\u304a\u3051\u308b\u52d5\u7684\u8a08\u753b\u6cd5\u306e\u30a2\u30a4\u30c7\u30a2\u306f\u3001\u300c \\(i\\) \u756a\u76ee\u306e\u304a\u83d3\u5b50\u307e\u3067\u306e\u4e2d\u304b\u3089\u3044\u304f\u3064\u304b\u3092\u9078\u3093\u3067\u91cd\u3055\u306e\u7dcf\u548c\u304c \\(j\\) \u306b\u306a\u308b\u7d44\u308f\u305b\u306e\u4fa1\u5024\u306e\u7dcf\u548c\u306e\u6700\u5927\u5024\u306f\u4f55\u304b\u300d\u3068\u3044\u3046\u90e8\u5206\u554f\u984c\u3092\u89e3\u304f\u3053\u3068\u3067\u3042\u308b\u3002 \u4e0a\u306e\u30ab\u30ae\u30ab\u30c3\u30b3\u3067\u56f2\u307e\u308c\u305f\u90e8\u5206\u306e\u7b54\u3048\u3068\u306a\u308b\u5024\u3092dp[i][j]\u3068\u3057\u3088\u3046\u3002\u3059\u308b\u3068 \\(dp[i][j] = max(dp[i-1][j], dp[i-1][j-w_i] + v_i)\\) \u304c\u3001\u6210\u7acb\u3059\u308b\u3002i\u304c\u5c0f\u3055\u3044\u9806\u306bdp\u914d\u5217\u3092\u57cb\u3081\u3066\u3044\u3051\u3070\u3001\u5168\u3066\u306e\u8981\u7d20\u304cO(1)\u3067\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 dp\u914d\u5217\u306e\u30b5\u30a4\u30ba\u306fO(NW)\u306a\u306e\u3067\u3001\u5168\u90e8\u3067O(NW)\u3067\u3053\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u52d5\u4f5c\u3059\u308b\u3002 \u4e00\u898b\u3053\u308c\u306f\u591a\u9805\u5f0f\u6642\u9593\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u898b\u3048\u308b\u304c\u3001W\u306f\u5165\u529b\u306e\u30b5\u30a4\u30ba\u3068\u306f\u95a2\u4fc2\u306a\u3044\u5024\u306a\u306e\u3067\uff08\u5f37\u3044\u3066\u8a00\u3046\u306a\u3089\u3070\u305d\u306e\u6841\u6570\u304c\u5165\u529b\u306e\u30b5\u30a4\u30ba\u3068\u306a\u308b\u306e\u3067\u3001\u6307\u6570\u30aa\u30fc\u30c0\u30fc\u3067\u5927\u304d\u304f\u306a\u308b\u5024)\u3001\u591a\u9805\u5f0f\u6642\u9593\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u306f\u306a\u3044\u3002 \u3053\u308c\u306f \u64ec\u591a\u9805\u5f0f\u6642\u9593\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 \u3067\u3042\u308b\u3002 \u4ee5\u4e0b\u306b\u5b9f\u88c5\u3092\u793a\u3059 def dynamic_programming ( n , W , vs , ws ): dp = [ 0 ] * ( W + 1 ) for i in range ( n ): for j in range ( W , ws [ i ] - 1 , - 1 ): dp [ j ] = max ( dp [ j ], dp [ j - ws [ i ]] + vs [ i ]) print ( \"value\" , max ( dp )) def main (): n , w , vs , ws = read () dynamic_programming ( n , w , vs , ws ) main () \u6f14\u7fd2 \u4e0a\u306e\u5b9f\u88c5\u3067\u306f\u6700\u9069\u89e3\u304c\u8868\u793a\u3055\u308c\u308b\u3060\u3051\u3067\u3001\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u306b\u5165\u308c\u308b\u304a\u83d3\u5b50\u306f\u8868\u793a\u3055\u308c\u306a\u3044\u3002\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u66f8\u304d\u306a\u304a\u3057\u3066\u307f\u3088\u3002 \u8a08\u7b97\u56f0\u96e3\u554f\u984c\u306b\u5bfe\u3059\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 \u5de1\u56de\u30bb\u30fc\u30eb\u30b9\u30de\u30f3\u554f\u984c\u3067\u3082\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u554f\u984c\u3067\u3082\u3001\u52d5\u7684\u8a08\u753b\u6cd5\u306f\u5168\u63a2\u7d22\u3088\u308a\u306f\u901f\u304f\u52d5\u3044\u305f\u304c\u305d\u308c\u3067\u3082\u6307\u6570\u6642\u9593\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306a\u306e\u3067\u5927\u304d\u306a\u30b5\u30a4\u30ba\u306e\u554f\u984c\u3092\u89e3\u304f\u306e\u306b\u306f\u6642\u9593\u304c\u304b\u304b\u308a\u3059\u304e\u3066\u3057\u307e\u3046\u3002 \u3057\u304b\u3057\u3001\u5fc5\u305a\u6b63\u3057\u3044\u6700\u77ed\u5de1\u56de\u8def\u9577\u3092\u8fd4\u3059\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u591a\u9805\u5f0f\u6642\u9593\u3067\u3042\u308b\u3082\u306e\u306f\u672a\u3060\u306b\u898b\u3064\u304b\u3063\u3066\u3044\u306a\u3044\u3002\u305d\u306e\u3088\u3046\u306a\u3082\u306e\u306f\u5b58\u5728\u3057\u306a\u3044\u3068\u3044\u3046\u4e88\u60f3\u3055\u3048\u3042\u308b\u3002 \u3053\u3053\u3067\u3001\u6700\u9069\u89e3\u3088\u308a\u5c11\u3057\u60aa\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u3001\u305d\u3093\u306a\u306b\u60aa\u304f\u306a\u3044\u89e3\u3092\u51fa\u3059\u3053\u3068\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u305f\u308a\u3001\u7d4c\u9a13\u7684\u306b\u308f\u304b\u3063\u3066\u3044\u305f\u308a\u3059\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u3044\u304f\u3064\u304b\u7d39\u4ecb\u3059\u308b\u3002 \u5c71\u767b\u308a\u6cd5 \u5c71\u767b\u308a\u6cd5\u306f\u3001\u6700\u9069\u3067\u306f\u306a\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u89e3\u304b\u3089\u51fa\u767a\u3057\u3066\u3001\u89e3\u304c\u6539\u5584\u3059\u308b\u3088\u3046\u306b\u5c0f\u3055\u306a\u5909\u5316\u3092\u3064\u3051\u3066\u3044\u304f\u3001\u3053\u308c\u4ee5\u4e0a\u3069\u3046\u5909\u5316\u3055\u305b\u3066\u3082\u89e3\u306f\u6539\u5584\u3057\u306a\u3044\u3068\u3044\u3046\u72b6\u614b\u307e\u3067\u6301\u3063\u3066\u3044\u304f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3042\u308b\u3002 \u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u554f\u984c\u306e\u5834\u5408\u3001\u300c\u9069\u5f53\u306b\u304a\u83d3\u5b50\u3092\u8a70\u3081\u8fbc\u3093\u3060\u5f8c\u3001\u307e\u3060\u8a70\u3081\u8fbc\u3093\u3067\u306a\u3044\u3082\u306e\u3092\u3072\u3068\u3064\u9078\u3093\u3067\u3001\u305d\u308c\u3092\u8a70\u3081\u8fbc\u3081\u308b\u3088\u3046\u306b\u5225\u306e\u304a\u83d3\u5b50\u3092\u9069\u5f53\u306b\u53d6\u308a\u51fa\u3059\u3002\u3053\u306e\u8a70\u3081\u66ff\u3048\u3067\u304a\u83d3\u5b50\u306e\u4fa1\u5024\u306e\u548c\u304c\u5897\u3048\u308b\u306a\u3089\u3001\u3053\u306e\u8a70\u66ff\u3048\u3092\u5b9f\u65bd\u3057\u3001\u305d\u3046\u3067\u306a\u3044\u306a\u3089\u5b9f\u65bd\u3057\u306a\u3044\u300d\u3068\u3044\u3046\u306e\u3092\u4f55\u5ea6\u3082\u3084\u308b\u3053\u3068\u306f\u5c71\u767b\u308a\u6cd5\u306b\u306a\u308b\u3002 \u4ee5\u4e0b\u306b\u5c71\u767b\u308a\u6cd5\u3067\u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u554f\u984c\u3092\u89e3\u304fpython\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u793a\u3059\u3002 def climb ( n , W , vs , ws , trial = 100000 ): snacks = list ( range ( n )) knapsack = [] vsum = 0 wsum = 0 for _ in range ( trial ): cand = randint ( 0 , len ( snacks ) - 1 ) snack = snacks [ cand ] if W - wsum >= ws [ snack ]: knapsack . append ( snack ) vsum += vs [ snack ] wsum += ws [ snack ] del snacks [ cand ] continue tw = wsum tv = vsum tk = knapsack [:] go_back = [] while W - tw < ws [ snack ]: tmp = randint ( 0 , len ( tk ) - 1 ) ts = tk [ tmp ] go_back . append ( ts ) del tk [ tmp ] tw -= ws [ ts ] tv -= vs [ ts ] tw += ws [ snack ] tv += vs [ snack ] tk . append ( snack ) if tv > vsum : vsum = tv wsum = tw knapsack = tk [:] snacks += go_back del snacks [ cand ] print ( \"value\" , vsum ) print ( \"snacks\" , sorted ( knapsack )) def main (): n , w , vs , ws = read () climb ( n , w , vs , ws ) main () \u5c71\u767b\u308a\u6cd5\u306f\u3001\u6700\u9069\u89e3\u306e\u5230\u7740\u3059\u308b\u307e\u3067\u52d5\u304b\u3057\u7d9a\u3051\u308c\u3070\u826f\u3044\u306e\u3060\u304c\u3001\u6700\u9069\u89e3\u3058\u3083\u306a\u3044\u3068\u3053\u308d\u306b\u3068\u3069\u307e\u3063\u3066\u3057\u307e\u3063\u305f\u308a\u3001\u305d\u3082\u305d\u3082\u6700\u9069\u89e3\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\u304c\u96e3\u3057\u304b\u3063\u305f\u308a\u3059\u308b\u306e\u3067\u3001\u901a\u5e38\u306f\u4f55\u56de\u30eb\u30fc\u30d7\u3092\u56de\u3059\u304b\u3092\u6307\u5b9a\u3057\u3066\u52d5\u304b\u3059\u3053\u3068\u304c\u591a\u3044\u3002 \u305d\u306e\u305f\u3081\u3001\u6700\u9069\u89e3\u304c\u5f97\u3089\u308c\u308b\u4fdd\u8a3c\u306f\u7121\u3044\u304c\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u8d70\u308b\u6642\u9593\u3092\u81ea\u7531\u306b\u8abf\u7bc0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 \u6f14\u7fd2(\u8208\u5473\u304c\u3042\u308c\u3070) \u5de1\u56de\u30bb\u30fc\u30eb\u30b9\u30de\u30f3\u554f\u984c\u3092\u5c71\u767b\u308a\u6cd5\u3067\u89e3\u304f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3002 \u5de1\u56de\u30bb\u30fc\u30eb\u30b9\u30de\u30f3\u554f\u984c\u306b\u304a\u3051\u308b\u5c71\u767b\u308a\u306e\u4f8b\u3068\u3057\u3066\u3001\u9069\u5f53\u306a2\u3064\u306e\u8857\u306e\u8a2a\u308c\u308b\u9806\u5e8f\u306e\u5165\u308c\u66ff\u3048\u3092\u3001\u7d4c\u8def\u9577\u304c\u6539\u5584\u3055\u308c\u305f\u3089\u5b9f\u65bd\u3057\u3001\u305d\u3046\u3067\u306a\u3044\u306a\u3089\u5b9f\u65bd\u3057\u306a\u3044\u3068\u3044\u3046\u306e\u3092\u4f55\u56de\u3082\u884c\u3046\u3082\u306e\u3067\u3042\u308b\u3002 \u713c\u304d\u306a\u307e\u3057\u6cd5 \u713c\u304d\u306a\u307e\u3057\u6cd5\u306f\u3001\u5c71\u767b\u308a\u6cd5\u3092\u6539\u826f\u3057\u305f\u3082\u306e\u3067\u3042\u308b\u3002\u5c71\u767b\u308a\u6cd5\u306f\u3001\u3068\u306b\u304b\u304f\u89e3\u304c\u826f\u304f\u306a\u308b\u65b9\u5411\u306b\u9032\u307f\u7d9a\u3051\u308b\u65b9\u91dd\u3067\u3042\u308b\u304c\u3001\u5c40\u6240\u7684\u306b\u6700\u9069\u3060\u304c\u3001\u5168\u4f53\u3068\u3057\u3066\u306f\u6700\u9069\u3067\u306f\u306a\u3044\u89e3\u306b\u3068\u3069\u307e\u3063\u3066\u3057\u307e\u3046\u3053\u3068\u304c\u6709\u308b\u3002 \u305d\u3053\u3067\u3001\u4f4e\u78ba\u7387\u3067\u89e3\u304c\u60aa\u304f\u306a\u308b\u65b9\u5411\u306b\u3082\u9032\u3080\u3088\u3046\u306b\u3059\u308b\u3068\u3044\u3046\u306e\u304c\u713c\u304d\u306a\u307e\u3057\u6cd5\u3067\u3042\u308b\u3002\u5b9f\u88c5\u306f\u307b\u3068\u3093\u3069\u5c71\u767b\u308a\u6cd5\u3068\u540c\u3058\u3060\u304c\u3001\u5909\u66f4\u3092\u52a0\u3048\u308b\u304b\u52a0\u3048\u306a\u3044\u304b\u306e\u5224\u65ad\u306e\u6761\u4ef6\u5f0f\u304c\u5c11\u3057\u5897\u3048\u308b\u3002 from random import randint def anealing ( n , W , vs , ws , trial = 100000 ): snacks = list ( range ( n )) knapsack = [] vsum = 0 wsum = 0 ans = 0 ansknapsack = [] for _ in range ( trial ): cand = randint ( 0 , len ( snacks ) - 1 ) snack = snacks [ cand ] if W - wsum >= ws [ snack ]: knapsack . append ( snack ) vsum += vs [ snack ] wsum += ws [ snack ] del snacks [ cand ] continue tw = wsum tv = vsum tk = knapsack [:] go_back = [] while W - tw < ws [ snack ]: tmp = randint ( 0 , len ( tk ) - 1 ) ts = tk [ tmp ] go_back . append ( ts ) del tk [ tmp ] tw -= ws [ ts ] tv -= vs [ ts ] tw += ws [ snack ] tv += vs [ snack ] tk . append ( snack ) if tv > vsum or randint ( 0 , trial ) < ( trial / _ ): vsum = tv wsum = tw knapsack = tk [:] snacks += go_back del snacks [ cand ] if ans < vsum : ans = vsum ansknapsack = knapsack [:] print ( \"value\" , ans ) print ( \"snacks\" , sorted ( ansknapsack )) def main (): n , w , vs , ws = read () climb ( n , w , vs , ws ) main () \u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u554f\u984c\u306e\u5834\u5408\u3001\u63a2\u7d22\u7a7a\u9593\u306b\u7f6e\u3044\u3066\u8fd1\u508d\u304c\u5e83\u3044\u305f\u3081\u3001\u713c\u304d\u306a\u307e\u3057\u6cd5\u3068\u5c71\u767b\u308a\u6cd5\u3067\u3042\u307e\u308a\u7d50\u679c\u306b\u5dee\u304c\u3064\u304b\u306a\u3044\u3002 \u8fd1\u508d\u304c\u305d\u3093\u306a\u306b\u591a\u304f\u306a\u3044\u5c71\u767b\u308a\u6cd5\u3092\u4f7f\u3046\u5de1\u56de\u30bb\u30fc\u30eb\u30b9\u30de\u30f3\u554f\u984c\u306a\u3069\u3067\u306f\u3001\u713c\u304d\u306a\u307e\u3057\u6cd5\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u3067\u7d50\u679c\u304c\u826f\u304f\u306a\u308b\u3053\u3068\u304c\u898b\u8fbc\u3081\u308b\u3002 \u6f14\u7fd2\u554f\u984c \u69d8\u3005\u306a\u30b5\u30a4\u30ba\u306e\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u554f\u984c\u3092\u7528\u610f\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30b9\u30d4\u30fc\u30c9\u3068\u3001\u89e3\u7b54\u306e\u7cbe\u5ea6\u3092\u6bd4\u3079\u3066\u307f\u3088\u3002 \u8fd1\u4f3c\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 \u8fd1\u4f3c\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u591a\u9805\u5f0f\u6642\u9593\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u306a\u304b\u3067\u3001\u6700\u9069\u304b\u3089\u305d\u3093\u306a\u306b\u96e2\u308c\u3066\u3044\u306a\u3044\u89e3\u3092\u8fd4\u3059\u3053\u3068\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3042\u308b\u3002 \u305f\u3068\u3048\u3070\u3001\u6700\u5c0f\u5024\u306e2\u500d\u3088\u308a\u306f\u5c0f\u3055\u3044\u5024\u3092\u8fd4\u3059\u3053\u3068\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u8fd1\u4f3c\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u4f8b\u3067\u3042\u308a\u30012-\u8fd1\u4f3c\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u547c\u3070\u308c\u308b\u3002 \u4ee5\u4e0b\u3067\u306f\u3001\u5de1\u56de\u30bb\u30fc\u30eb\u30b9\u30de\u30f3\u554f\u984c\u306e2\u8fd1\u4f3c\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7d39\u4ecb\u3059\u308b\u3002 \u305f\u3060\u3057\u3001\u3053\u308c\u3089\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u4e09\u89d2\u4e0d\u7b49\u5f0f\u304c\u6210\u308a\u7acb\u3064\u3053\u3068\u304c\u524d\u63d0\u3068\u306a\u3063\u3066\u3044\u308b\u3002 \u6700\u8fd1\u633f\u5165\u6cd5 \u6700\u8fd1\u633f\u5165\u6cd5\u306f\u3001\u88570\u3060\u3051\u304b\u3089\u306a\u308b\u5de1\u56de\u8def\u306b\u3001\u3044\u307e\u306e\u5de1\u56de\u8def\u306b\u8fd1\u3044\u8857\u304b\u3089\u9806\u306b\u3072\u3068\u3064\u305a\u3064\u5de1\u56de\u8def\u306b\u633f\u5165\u3057\u3066\u3044\u304f\u65b9\u6cd5\u3067\u3042\u308b\u3002 \u53b3\u5bc6\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u306a\u308b\u3002 S=[0]\u3068\u3059\u308b S\u306b\u542b\u307e\u308c\u308b\u8857\u3068\u3001\u305d\u308c\u4ee5\u5916\u306e\u8857\u306e\u8ddd\u96e2\u306e\u4e2d\u3067\u3001\u6700\u3082\u77ed\u3044\u3082\u306e\u3092\u898b\u3064\u3051\u3066\u304f\u308b\u3002S\u306b\u542b\u307e\u308c\u308b\u65b9\u3092u, \u542b\u307e\u308c\u306a\u3044\u65b9\u3092v\u3068\u3059\u308b\u3002 S\u306e\u306a\u304b\u3067u\u306e\u76f4\u5f8c\u306bv\u3092\u633f\u5165\u3059\u308b\u3002 \u5168\u3066\u306e\u8857\u304cS\u306b\u542b\u307e\u308c\u305f\u306a\u3089\u7d42\u4e86\u3057\u3001\u305d\u3046\u3067\u306a\u3044\u306a\u30892\u306b\u623b\u308b\u3002 \u5b9f\u969b\u306b\u5b9f\u88c5\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b INF = 10 ** 10 def read (): n = int ( input ()) d = [] for i in range ( n ): d . append ( list ( map ( int , input () . split ()))) return n , d def distance ( route , d ): ret = 0 for i in range ( len ( route ) - 1 ): ret += d [ route [ i ]][ route [ i + 1 ]] return ret def solve ( n , d ): route = [ 0 ] used = [ False ] * n used [ 0 ] = True dist = d [ 0 ] neighb = [ 0 ] * n for i in range ( n - 1 ): nxt = - 1 td = INF for j in range ( n ): if used [ j ]: continue if td > dist [ j ]: nxt = j td = dist [ j ] ne = neighb [ nxt ] ind = route . index ( ne ) route = route [: ne ] + [ nxt ] + route [ ne :] used [ nxt ] = True for j in range ( n ): if used [ j ]: continue if dist [ j ] > d [ nxt ][ j ]: dist [ j ] = d [ nxt ][ j ] neighb [ j ] = nxt ind = route . index ( 0 ) route = route [ ind :] + route [: ind ] print ( \"dist\" , distance ( route + [ 0 ], d )) print ( \"route\" , route + [ 0 ]) def main (): n , d = read () solve ( n , d ) main () \u6f14\u7fd2\u554f\u984c \u81ea\u5206\u3067\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u4f5c\u3063\u3066\u307f\u3066\u6700\u8fd1\u633f\u5165\u6cd5\u3092\u8a66\u3057\u3066\u307f\u3088\u3002\u5c0f\u3055\u3044\u30b1\u30fc\u30b9\u3067\u306f\u52d5\u7684\u8a08\u753b\u6cd5\u304c\u8fd4\u3059\u6700\u9069\u89e3\u3068\u6bd4\u8f03\u3057\u3066\u30012\u8fd1\u4f3c\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u304b\u3081\u3088\u3002 \u6f14\u7fd2\u554f\u984c 2\u6b21\u5143\u5e73\u9762\u4e0a\u306eN\u70b9\u306e\u6700\u77ed\u5de1\u56de\u8def\u3092\u3082\u3068\u3081\u3066\u53ef\u8996\u5316\u3057\u3066\u307f\u3088\u3002javascript\u3084PIL\u3084gnuplot\u3092\u4f7f\u3063\u3066\u3082\u826f\u3044\u304c\u3001Processing\u304c\u66f8\u3051\u308b\u306a\u3089\u3070\u3001Processing\u306e\u30b3\u30fc\u30c9\u3092\u51fa\u529b\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u308b\u306e\u304c\u4e00\u756a\u697d\u3060\u308d\u3046\u3002 \u5927\u304d\u3081\u306a\u5165\u51fa\u529b\u4f8b \u3053\u306e\u30da\u30fc\u30b8 \u306b\u5927\u304d\u3081\u306a\u5165\u51fa\u529b\u4f8b\u304c\u3042\u308b\u3002\u8a66\u3057\u3066\u307f\u3088\u3046\u3002 TSP\u306eVisualizer Visualizer \u5165\u529b\u306e\u756a\u53f7\u3092\u9078\u3093\u3067SetInput\u3092\u62bc\u3059\u3068\u70b9\u304c\u63cf\u753b\u3055\u308c\u308b\u3002 \u30eb\u30fc\u30c8\u306f\u7a7a\u767d\u533a\u5207\u308a\u3067\u3081\u3050\u308b\u9806\u756a\u3092\u5165\u308c\u308c\u3070\u3088\u3044\u3002\u6700\u5f8c\u306b\u51fa\u767a\u5730\u70b9\u3092\u8ffd\u52a0\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u3002","title":"\u8a08\u7b97\u56f0\u96e3\u554f\u984c"},{"location":"hard_computing/#_1","text":"","title":"\u8a08\u7b97\u56f0\u96e3\u554f\u984c"},{"location":"hard_computing/#_2","text":"\u8a08\u7b97\u56f0\u96e3\u554f\u984c(hard computing problem)\u306f\u3001\u8a08\u7b97\u306b\u3068\u3066\u3082\u6642\u9593\u304c\u304b\u304b\u308b\u554f\u984c\u3067\u3042\u308b\u3002 \u307e\u305a\u306f\u3001\u8a08\u7b97\u306b\u304b\u304b\u308b\u6642\u9593\u3068\u3044\u3046\u6982\u5ff5\u3092\u3082\u3046\u5c11\u3057\u53b3\u5bc6\u306b\u6271\u3046\u305f\u3081\u306b\u3001\u8a08\u7b97\u91cf\u3068\u3044\u3046\u6982\u5ff5\u3092\u8aac\u660e\u3057\u3088\u3046\u3002","title":"\u8a08\u7b97\u56f0\u96e3\u554f\u984c\u3068\u306f"},{"location":"hard_computing/#_3","text":"\u8a08\u7b97\u91cf\u3068\u3044\u3046\u306e\u306f\u3001\u3042\u308b\u554f\u984c\u3092\u89e3\u304f\u3068\u304d\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u5b9f\u884c\u3059\u308b\u8a08\u7b97\u306e\u56de\u6570\u3092\u793a\u3059\u91cf\u3067\u3042\u308b\u3002 \u4f8b\u3048\u30701\u304b\u3089100\u307e\u3067\u306e\u6574\u6570\u306e\u7dcf\u548c\u3092\u6c42\u3081\u308b\u3068\u3057\u3088\u3046\u3002 \u6700\u3082\u5358\u7d14\u306a\u65b9\u6cd5\u3068\u3057\u3066\u3001\u7d20\u76f4\u306b99\u56de\u8db3\u3057\u7b97\u3092\u884c\u3046\u65b9\u6cd5\u304c\u3042\u308b\u3002\u6587\u5b57\u901a\u308a99\u56de\u306e\u8a08\u7b97\u304c\u884c\u308f\u308c\u308b\u3002 \u305d\u308c\u306b\u5bfe\u3057\u3066\u3001\u7b49\u5dee\u6570\u5217\u306e\u548c\u306e\u516c\u5f0f((\u521d\u9805 + \u672b\u9805)\u00d7\u9805\u6570 \u00f72)\u3092\u5229\u7528\u3059\u308c\u3070\u3001\u305f\u304b\u3060\u304b3\u56de\u306e\u8a08\u7b97\u3067\u7dcf\u548c\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 \u3082\u3057\u3053\u308c\u304c100\u307e\u3067\u3067\u306f\u306a\u304f\u3066 \\(n\\) \u307e\u3067\u3060\u3068\u3057\u305f\u3089\u3069\u3046\u306a\u308b\u3060\u308d\u3046\u304b\u3002 \u7d20\u76f4\u306b\u5168\u90e8\u8db3\u3057\u5408\u308f\u305b\u308b\u65b9\u6cd5\u3060\u3068\u8a08\u7b97\u56de\u6570\u306f \\(n-1\\) \u56de\u306b\u306a\u308a\u3001\u516c\u5f0f\u3092\u4f7f\u3046\u5834\u5408\u3060\u3068\u3001\u3069\u3093\u306a \\(n\\) \u306b\u5bfe\u3057\u3066\u30823\u56de\u3068\u306a\u308b\u3002 \u3053\u306e \\(n-1\\) \u3084 \\(3\\) \u304c\u305d\u308c\u305e\u308c\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u8a08\u7b97\u91cf\u3067\u3042\u308b\u3002 \u8a08\u7b97\u91cf\u3092\u8868\u3059\u969b\u306f\u7d30\u304b\u3044\u6570\u5b57\u3088\u308a\u3001\u6700\u3082\u652f\u914d\u7684\u306a\u9805\u3060\u3051\u3092\u629c\u304d\u51fa\u3059\u305f\u3081\u306b\u3001 \\(\\Theta\\) \u8a18\u6cd5\u3084 \\(O\\) \u8a18\u6cd5\u3092\u4f7f\u3046\u3002","title":"\u8a08\u7b97\u91cf"},{"location":"hard_computing/#o","text":"\u0398\u8a18\u6cd5 \u306f\u95a2\u6570\u306e\u7a2e\u985e\u3092\u8868\u3059\u8a18\u6cd5\u3067\u3042\u308b\u3002 \\(f(x) = \\Theta(g(x))\\) \u3068\u66f8\u304f\u3053\u3068\u306b\u3088\u3063\u3066\u3001 \\(f(x)\\) \u306f \\(g(x)\\) \u3068\u540c\u7b49\u306e\u30b9\u30b1\u30fc\u30eb\u3067\u5927\u304d\u304f\u306a\u308b\u95a2\u6570\u3060\u3001\u3068\u3044\u3046\u3053\u3068\u3092\u8868\u3059\u3002\u3053\u3053\u3067\u3001\u300c\u540c\u7b49\u306e\u30b9\u30b1\u30fc\u30eb\u300d\u3068\u3044\u3046\u306e\u306f\u3001 \\(x\\) \u3092\u7121\u9650\u306b\u5927\u304d\u304f\u3057\u3066\u3044\u3063\u305f\u6642\u306b\u3001 \\(f(x)\\) \u3068 \\(g(x)\\) \u306e\u6bd4\u304c \\(0\\) \u306b\u53ce\u675f\u305b\u305a\u3001\u307e\u305f\u6709\u308b\u5b9a\u6570\u3092\u8d85\u3048\u308b\u3053\u3068\u304c\u306a\u3044\u3001\u3068\u3044\u3046\u3053\u3068\u3092\u8868\u3059\u3002 \u4ee5\u4e0b\u306e\u4f8b\u3092\u898b\u3066\u3001 \\(\\Theta\\) \u8a18\u6cd5\u306e\u30a4\u30e1\u30fc\u30b8\u3092\u63b4\u3093\u3067\u6b32\u3057\u3044\u3002 \\(x^2+2x+4 = \u0398(x^2)\\) \\(500x^3 + 10x- 2000000 + 1/x = \u0398(x^3)\\) \\((x+4)^10 = \u0398(x^{10})\\) \\(2^x + x^3 = \u0398(2^x)\\) \\(0.8^x + x^3 - \\sin(x) = \u0398(x^3)\\) O\u8a18\u6cd5 \u306f\u03a9\u8a18\u6cd5\u306e\u4ef2\u9593\u3067\u3042\u308b\u3002 \\(f(x) = O(g(x))\\) \u3068\u66f8\u304f\u3053\u3068\u306b\u3088\u3063\u3066\u3001 \\(f(x)\\) \u306f \\(g(x)\\) \u3068\u540c\u7b49\u304b\u305d\u308c\u3088\u308a\u5c0f\u3055\u3044\u30b9\u30b1\u30fc\u30eb\u3067\u5927\u304d\u304f\u306a\u308b\u3053\u3068\u3092\u8868\u3059\u3002 \\(f(x) < h(x), h(x) = \u0398(g(x))\\) \u3068\u306a\u308b \\(h(x)\\) \u304c\u5b58\u5728\u3059\u308b\u306a\u3089\u3001 \\(f(x)=O(g(x))\\) \u3067\u3042\u308b\u3002 \u0398\u8a18\u6cd5\u304c\u300c\u30a4\u30b3\u30fc\u30eb\u300d\u306b\u5bfe\u5fdc\u3059\u308b\u306a\u3089\u3001O\u8a18\u6cd5\u306f\u300c\u5c0f\u306a\u308a\u30a4\u30b3\u30fc\u30eb\u300d\u306b\u5bfe\u5fdc\u3059\u308b\u3068\u8003\u3048\u3066\u3082\u3089\u3063\u3066\u826f\u3044\u3002","title":"\u0398\u8a18\u6cd5,O\u8a18\u6cd5"},{"location":"hard_computing/#_4","text":"\u3042\u308b\u7a2e\u985e\u306e\u554f\u984c\u3092\u89e3\u304f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u3001\u554f\u984c\u306b\u51fa\u3066\u304f\u308b\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba\u306b\u5bfe\u3057\u3066\u3069\u308c\u304f\u3089\u3044\u306e\u8a08\u7b97\u91cf\u304c\u304b\u304b\u308b\u304b\u3001\u3068\u3044\u3046\u306e\u304c\u8a08\u7b97\u6a5f\u79d1\u5b66\u306e\u8208\u5473\u3067\u3042\u308b\u3002 \u305f\u3068\u3048\u3070\u3001\u300c\u6574\u6570\u304cN\u500b\u4e0e\u3048\u3089\u308c\u3066\u3001\u305d\u306e\u7dcf\u548c\u3092\u6c42\u3081\u308b\u611a\u76f4\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u8a08\u7b97\u91cf\u306f \\(O(N)\\) \u3067\u3042\u308b\u300d\u3068\u304b\u300c\u6574\u6570\u304cN\u500b\u4e0e\u3048\u3089\u308c\u3066\u3001\u548c\u304c0\u306b\u306a\u308b3\u3064\u7d44\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u306f \\(O(N^2)\\) \u306e\u8a08\u7b97\u91cf\u3067\u5224\u5b9a\u3067\u304d\u308b\u300d\u3068\u3044\u3046\u3075\u3046\u306b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u8a08\u7b97\u91cf\u3092\u8b70\u8ad6\u3059\u308b\u3002 \u3042\u308b\u554f\u984c\u3092\u89e3\u304f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u3001\u554f\u984c\u306e\u30b5\u30a4\u30baN\u306b\u5bfe\u3057\u3066\u3001\u3042\u308b\u591a\u9805\u5f0ff(N)\u304c\u5b58\u5728\u3057\u3066\u3001 \\(O(f(N))\\) \u306e\u6642\u9593\u3067\u52d5\u4f5c\u3059\u308b\u3068\u304d\u3001\u305d\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f \u591a\u9805\u5f0f\u6642\u9593\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 \u3068\u547c\u3076\u3002 \u307e\u305f\u3001 \\(f(N)\\) \u304c\u6307\u6570\u95a2\u6570\u306e\u6642\u306f \u6307\u6570\u6642\u9593\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 \u3068\u547c\u3076\u3002","title":"\u591a\u9805\u5f0f\u6642\u9593\u3001\u6307\u6570\u6642\u9593"},{"location":"hard_computing/#_5","text":"\u3053\u308c\u304b\u3089\u6271\u3063\u3066\u3044\u304f\u8a08\u7b97\u56f0\u96e3\u554f\u984c\u306f\u3001 \u6307\u6570\u6642\u9593\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 \u306f\u898b\u3064\u304b\u3063\u3066\u3044\u308b\u304c\u3001 \u591a\u9805\u5f0f\u6642\u9593\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 \u306f\u898b\u3064\u304b\u3063\u3066\u3044\u306a\u3044\u3001\u3042\u308b\u3044\u306f\u7121\u3044\u3068\u4e88\u60f3\u3055\u308c\u3066\u3044\u308b\u554f\u984c\u3067\u3042\u308b\u3002 \u4ee3\u8868\u7684\u306a\u554f\u984c\u3068\u3057\u3066\u5145\u8db3\u53ef\u80fd\u6027\u554f\u984c(SAT)\u3084\u5de1\u56de\u30bb\u30fc\u30eb\u30b9\u30de\u30f3\u554f\u984c(TSP)\u306a\u3069\u304c\u3042\u308b\u3002 \u307e\u305a\u306f\u3001\u591a\u9805\u5f0f\u6642\u9593\u3067\u306f\u89e3\u3051\u306a\u3044\u3068\u3055\u308c\u3066\u3044\u308b\u554f\u984c\u306e\u4e2d\u3067\u3082\u7279\u306b\u6709\u540d\u306a \u5de1\u56de\u30bb\u30fc\u30eb\u30b9\u30de\u30f3\u554f\u984c \u3092\u898b\u3066\u3044\u3053\u3046\u3002","title":"\u8a08\u7b97\u56f0\u96e3\u554f\u984c"},{"location":"hard_computing/#_6","text":"\u5de1\u56de\u30bb\u30fc\u30eb\u30b9\u30de\u30f3\u554f\u984c(travelling salesman problem)\u3068\u306f\u4ee5\u4e0b\u306e\u5f62\u5f0f\u306e\u554f\u984c\u3067\u3042\u308b\u3002 \u300c \\(N\\) \u500b\u306e\u8857\u304c\u3042\u308b\u3002 \\(i\\) \u756a\u76ee\u306e\u8857\u3068 \\(j\\) \u756a\u76ee\u306e\u8857\u306f\u8ddd\u96e2 \\(d_{i,j}\\) \u306e\u9053\u3067\u7d50\u3070\u308c\u3066\u3044\u308b\u30020\u756a\u76ee\u306e\u8857\u304b\u3089\u958b\u59cb\u3057\u3066\u3001\u5168\u3066\u306e\u8857\u3092\u3061\u3087\u3046\u30691\u56de\u305a\u3064\u901a\u3063\u3066\u3082\u3046\u4e00\u5ea6\uff100\u76ee\u306e\u8857\u306b\u5e30\u3063\u3066\u304f\u308b\u30eb\u30fc\u30c8\u306e\u3046\u3061\u3001\u7dcf\u79fb\u52d5\u8ddd\u96e2\u304c\u6700\u5c0f\u306e\u3082\u306e\u3092\u6c42\u3081\u3088\u3002\u300d \u307e\u305a\u306f\u3053\u306e\u554f\u984c\u306e\u69d8\u3005\u306a\u89e3\u6cd5\u3092\u5b9f\u88c5\u3057\u3066\u901f\u3055\u3092\u6bd4\u3079\u3066\u307f\u3088\u3046\u3002","title":"\u5de1\u56de\u30bb\u30fc\u30eb\u30b9\u30de\u30f3\u554f\u984c"},{"location":"hard_computing/#_7","text":"\u3053\u306e\u5148\u3001\u5de1\u56de\u30bb\u30fc\u30eb\u30b9\u30de\u30f3\u554f\u984c\u3092\u89e3\u304f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u3044\u304f\u3064\u304b\u7d39\u4ecb\u3057\u3001\u5b9f\u88c5\u3082\u3059\u308b\u3002\u305d\u308c\u306b\u3042\u305f\u3063\u3066\u3001\u3069\u306e\u3088\u3046\u306a\u5f62\u5f0f\u3067\u554f\u984c\u304c\u4e0e\u3048\u3089\u308c\u308b\u304b\u3092\u6c7a\u3081\u3066\u304a\u304b\u306a\u3044\u3068\u4e0d\u4fbf\u3067\u3042\u308b\u3002 \u5168\u3066\u306e\u5b9f\u88c5\u306b\u304a\u3044\u3066\u3001\u6a19\u6e96\u5165\u529b\u304b\u3089\u3001\u4ee5\u4e0b\u306e\u5f62\u5f0f\u3067\u554f\u984c\u3092\u53d7\u3051\u53d6\u308b\u3068\u3044\u3046\u3053\u3068\u306b\u3059\u308b\u3002 N d_0,0 d_0,1 d_0,2 .. d_0,N-1 d_1,0 d_1,1 d_1,2 .. d_1,N-1 : d_N-1,0 d_N-1,1 d_N-1,2 .. d_N-1,N-1 \u3064\u307e\u308a\u3001\u6700\u521d\u306e1\u884c\u306b\u306f\u5de1\u56de\u3059\u308b\u8857\u306e\u500b\u6570\u304c\u66f8\u304b\u308c\u3066\u304a\u308a\u3001\u7d9a\u304f \\(N\\) \u884c\u306b\u306f\u305d\u308c\u305e\u308c \\(N\\) \u500b\u306e\u6570\u5b57\u304c\u66f8\u304b\u308c\u3066\u304a\u308a\u3001 \\(i\\) \u884c \\(j\\) \u5217\u76ee\u306f\u8857 \\(i\\) \u3068\u8857 \\(j\\) \u306e\u8ddd\u96e2\u304c\u66f8\u304b\u308c\u3066\u3044\u308b\u3002 \u307e\u305f\u3001\u4ee5\u4e0b\u306e\u5236\u7d04\u3082\u8ab2\u3059\u3053\u3068\u306b\u3059\u308b\u3002 \\(d_{i,j}\\) \u306f\u975e\u8ca0\u6574\u6570 \\(d_{i,i} = 0\\) i\u3068j\u306e\u8ddd\u96e2\u306fj\u3068i\u306e\u8ddd\u96e2\u3068\u7b49\u3057\u3044 \u5165\u529b\u3084\u7b54\u3048\u306f \\(10^{10}\\) \u3092\u8d85\u3048\u306a\u3044 \u4ee5\u4e0b\u306b\u5165\u529b\u3092\u53d7\u3051\u53d6\u3063\u3066\u3001\u4e8c\u6b21\u5143\u914d\u5217d\u306b\u5404\u8857\u306e\u9593\u306e\u8ddd\u96e2\u3092\u683c\u7d0d\u3059\u308b\u95a2\u6570\u306epython\u3067\u306e\u5b9f\u884c\u3092\u6319\u3052\u308b\u3002\u4ed6\u306e\u8a00\u8a9e\u3092\u4f7f\u3063\u3066\u3044\u308b\u4eba\u306f\u9069\u5b9c\u5b9f\u88c5\u3057\u306a\u304a\u3057\u3066\u307b\u3057\u3044\u3002 def read (): n = int ( input ()) d = [] for i in range ( n ): d . append ( list ( map ( int , input () . split ()))) return d \u3053\u306e\u90e8\u5206\u306f\u3069\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3082\u4f7f\u7528\u3059\u308b\u306e\u3067\u3001\u3069\u3053\u304b\u306b\u5225\u540d\u3067\u4fdd\u5b58\u3057\u3066\u304a\u304f\u3068\u826f\u3044\u3060\u308d\u3046\u3002","title":"\u5165\u529b\u5f62\u5f0f"},{"location":"hard_computing/#_8","text":"\u307e\u305a\u306f\u3001\u6700\u3082\u30b7\u30f3\u30d7\u30eb\u306a\u5168\u63a2\u7d22\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u898b\u3066\u3044\u3053\u3046\u3002\u3053\u308c\u306f\u8857\u3092\u3081\u3050\u308b\u9806\u5e8f\u3092\u5168\u901a\u308a\u8a66\u3059\u3068\u3044\u3046\u3082\u306e\u3067\u3042\u308b\u3002 0\u756a\u76ee\u4ee5\u5916\u306e\u8857\u3092\u4f55\u3089\u304b\u306e\u9806\u756a\u30671\u56de\u305a\u3064\u901a\u308b\u30eb\u30fc\u30c8\u306f\u5168\u90e8\u3067 \\((N-1)!\\) \u901a\u308a\u3042\u308b\u3002\u3046\u307e\u3044\u5177\u5408\u306b\u3053\u308c\u3089\u3092\u5217\u6319\u3057\u3066\u3001\u305d\u306e\u4e2d\u3067\u6700\u3082\u8ddd\u96e2\u304c\u77ed\u3044\u3082\u306e\u3092\u8fd4\u305b\u3070\u3001\u5de1\u56de\u30bb\u30fc\u30eb\u30b9\u30de\u30f3\u554f\u984c\u306f\u89e3\u3051\u308b\u3002 \u30eb\u30fc\u30c8\u3092\u4e00\u3064\u6c7a\u3081\u305f\u3068\u304d\u3001\u305d\u306e\u30eb\u30fc\u30c8\u306e\u7dcf\u79fb\u52d5\u8ddd\u96e2\u306f \\(O(N)\\) \u3067\u6c42\u307e\u308b\u306e\u3067\u3001\u3053\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u8a08\u7b97\u91cf\u306f \\(O(N!)\\) \u3068\u306a\u308b\u3002\u3053\u308c\u306f\u6307\u6570\u6642\u9593\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\u3089\u306a\u304f\u3001\u3068\u3066\u3082\u9045\u3044\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u306a\u308b\u304c\u3001\u5b9f\u88c5\u306f\u7c21\u5358\u3067\u3001\u6b63\u5f53\u6027\u304c\u660e\u3089\u304b\u306a\u306e\u3067\u3001\u8a66\u3057\u306b\u5b9f\u88c5\u3059\u308b\u306b\u306f\u3061\u3087\u3046\u3069\u3088\u3044\u3002 \u4ee5\u4e0b\u306b\u5168\u63a2\u7d22\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u6319\u3052\u308b\u3002 INF = 10 ** 10 #\u7121\u9650\u5927\u306e\u4ee3\u308f\u308a def distance ( route , d ): ret = 0 for i in range ( len ( route ) - 1 ): ret += d [ route [ i ]][ route [ i + 1 ]] return ret def next_permutation ( l ): n = len ( l ) i = n - 2 while i >= 0 and l [ i ] >= l [ i + 1 ]: i -= 1 if i == - 1 : return False j = i + 1 while j < n and l [ j ] > l [ i ]: j += 1 j -= 1 l [ i ], l [ j ] = l [ j ], l [ i ] left = i + 1 right = n - 1 while left < right : l [ left ], l [ right ] = l [ right ], l [ left ] left += 1 right -= 1 return True def solve ( n , d ): route = list ( range ( 1 , n )) min_dist = INF min_route = None while True : tmp = distance ([ 0 ] + route + [ 0 ], d ) if tmp < min_dist : min_dist = tmp min_route = route [:] if not next_permutation ( route ): break print ( \"dist\" , min_dist ) print ( \"route\" , [ 0 ] + min_route + [ 0 ]) def main (): n , d = read () solve ( n , d ) main () next_permutation(l) \u95a2\u6570\u306f\u30ea\u30b9\u30c8l\u3092\u53d7\u3051\u53d6\u3063\u3066\u3001l\u3092\u3072\u3068\u3064\u6b21\u306e\u9806\u5217\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\u3067\u3042\u308b\u3002\u623b\u308a\u5024\u306f\u3001\u5909\u63db\u306b\u6210\u529f\u3057\u305f\u304b\u3069\u3046\u304b\u3067\u3042\u308b\u3002 \uff4c\u3092\u6607\u9806\u306b\u30bd\u30fc\u30c8\u3055\u308c\u305f\u30ea\u30b9\u30c8\u3068\u3057\u3066\u3001 next_permutation(l) \u306b\u9806\u6b21\u304b\u3051\u3066\u3044\u304f\u3068\u3001\u5168\u3066\u306e\u9806\u5217\u3092\u7d4c\u7531\u3057\u305f\u5f8c\u306b\u3001\u964d\u9806\u306b\u30bd\u30fc\u30c8\u3055\u308c\u3066\u7d42\u4e86\u3059\u308b\u3002 next_permutation \u306e\u5b9f\u88c5\u306f\u3068\u3066\u3082\u96e3\u89e3\u306a\u306e\u3067\u3001\u3088\u304f\u8aad\u3093\u3067\u7406\u89e3\u3057\u3088\u3046\u3002 \u5b9f\u88c5\u304c\u3067\u304d\u305f\u3089\u8a66\u3057\u306b\u3001\u4ee5\u4e0b\u306e\u5165\u529b\u3067\u52d5\u4f5c\u3092\u78ba\u8a8d\u3059\u308b\u3068\u826f\u3044\u3002 4 0 1 1 2 1 0 2 3 1 2 0 4 2 3 4 0 \u3046\u307e\u304f\u52d5\u3051\u3070\u4ee5\u4e0b\u306e\u30eb\u30fc\u30c8\u304c\u5f97\u3089\u308c\u308b\u306f\u305a\u3060 dist 8 route [0, 2, 1, 3, 0]","title":"\u5168\u63a2\u7d22"},{"location":"hard_computing/#_9","text":"\u5168\u63a2\u7d22\u3092\u3059\u308b\u3068\u3001\u8a08\u7b97\u91cf\u304c\u6307\u6570\u3069\u3053\u308d\u304b\u968e\u4e57\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u3001\u3068\u3066\u3082\u9045\u3044\u3002\u307e\u305a\u306f\u4ee3\u8868\u7684\u306a\u6307\u6570\u6642\u9593\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3042\u308b\u52d5\u7684\u8a08\u753b\u6cd5\u3092\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3046\u3002 \u52d5\u7684\u8a08\u753b\u6cd5\u306e\u30a2\u30a4\u30c7\u30a2\u306f\u3001\u300c\u9802\u70b90\u304b\u3089\u51fa\u767a\u3057\u3066\u3001\u9802\u70b9\u96c6\u5408V\u3092\u7d4c\u7531\u3057\u3001\u9802\u70b9i\u306b\u6765\u308b\u3068\u304d\u306e\u6700\u77ed\u7d4c\u8def\u3092\u6c42\u3081\u308b\u300d\u3068\u3044\u3046\u90e8\u5206\u554f\u984c\u3092\u89e3\u304f\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\u3002 \u4e0a\u306e\u30ab\u30ae\u30ab\u30c3\u30b3\u3067\u56f2\u307e\u308c\u305f\u90e8\u5206\u306e\u7b54\u3048\u3068\u306a\u308b\u5024\u3092dp[V][i]\u3068\u3057\u3088\u3046\u3002\u3053\u306e\u3068\u304di\u306fV\u306b\u542b\u307e\u308c\u308b\u3068\u3059\u308b\u3002 V\u304b\u3089i\u3092\u53d6\u308a\u9664\u3044\u305f\u9802\u70b9\u96c6\u5408\u3092W\u3068\u3057\u3088\u3046\u3002\u3059\u308b\u3068 \\(dp[V][i] = min_{j \\in W} {dp[W][j] + d[j][i]}\\) \u304c\u3001\u6210\u7acb\u3059\u308b\u3002\u3053\u308c\u306fi\u306b\u8a2a\u308c\u308b\u4e00\u3064\u524d\u306e\u9802\u70b9\u306b\u3064\u3044\u3066\u5168\u63a2\u7d22\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u306a\u308b\u3002 V\u306e\u30b5\u30a4\u30ba\u304c\u5c0f\u3055\u3044\u9806\u306bdp\u914d\u5217\u3092\u57cb\u3081\u3066\u3044\u3051\u3070\u3001\u5168\u3066\u306e\u8981\u7d20\u304cO(N)\u3067\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 dp\u914d\u5217\u306e\u30b5\u30a4\u30ba\u306fO(N2^N)\u306a\u306e\u3067\u3001\u5168\u90e8\u3067O(N^2 2^N)\u3067\u3053\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u52d5\u4f5c\u3059\u308b\u3002 \u4ee5\u4e0b\u306b\u305d\u306e\u5b9f\u88c5\u3092\u793a\u3059\u3002 INF = 10 ** 10 #\u7121\u9650\u5927\u306e\u4ee3\u308f\u308a def solve ( n , d ): dp = [[ INF ] * n for i in range ( 1 << n )] dp [ 1 ][ 0 ] = 0 for v in range ( 2 , 1 << n ): for i in range ( 1 , n ): if ( v & ( 1 << i )) == 0 : continue for j in range ( n ): if i == j or ( v & ( 1 << j )) == 0 : continue dp [ v ][ i ] = min ( dp [ v ][ i ], dp [ v - ( 1 << i )][ j ] + d [ j ][ i ]) res = INF for i in range ( 1 , n ): res = min ( res , dp [( 1 << n ) - 1 ][ i ] + d [ i ][ 0 ]) print ( \"dist\" , res ) def main (): n , d = read () solve ( n , d ) main () \u3053\u308c\u3082\u3001\u5168\u63a2\u7d22\u306b\u3042\u308b\u5165\u529b\u4f8b\u3067\u52d5\u4f5c\u78ba\u8a8d\u3092\u3059\u308b\u3068\u826f\u3044\u3060\u308d\u3046\u3002","title":"\u52d5\u7684\u8a08\u753b\u6cd5"},{"location":"hard_computing/#_10","text":"\u4e0a\u306e\u5b9f\u88c5\u3067\u306f\u6700\u77ed\u7d4c\u8def\u306e\u8ddd\u96e2\u3057\u304b\u8868\u793a\u3055\u308c\u306a\u3044\u3002\u305d\u306e\u8ddd\u96e2\u3092\u5b9f\u73fe\u3059\u308b\u6700\u77ed\u7d4c\u8def\u3082\u4e00\u7dd2\u306b\u8868\u793a\u3059\u308b\u3088\u3046\u306b\u6539\u5909\u3057\u3066\u307f\u3088\u3002 (Hint:dp[V][i]\u304c\u6700\u5f8c\u306b\u66f4\u65b0\u3055\u308c\u305f\u6642\u306ej\u3092\u899a\u3048\u3066\u304a\u304f\u3068\u826f\u3044)","title":"\u6f14\u7fd2"},{"location":"hard_computing/#_11","text":"\u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u554f\u984c(Knapsack problem)\u3068\u306f\u4ee5\u4e0b\u306e\u5f62\u5f0f\u306e\u554f\u984c\u3067\u3042\u308b\u3002 \u300c \\(N\\) \u500b\u306e\u304a\u83d3\u5b50\u3068\u91cd\u91cf\u5236\u9650 \\(W\\) \u306e\u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u304c\u3042\u308b\u3002 \\(i\\) \u756a\u76ee\u306e\u304a\u83d3\u5b50\u306e\u4fa1\u5024\u306f \\(V_i\\) \u3067\u91cd\u3055\u306f \\(W_i\\) \u3067\u3042\u308b\u3002\u91cd\u3055\u306e\u7dcf\u548c\u304c \\(W\\) \u3092\u8d85\u3048\u306a\u3044\u3088\u3046\u306b\u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u306b\u304a\u83d3\u5b50\u3092\u8a70\u3081\u8fbc\u3080\u3068\u304d\u3001\u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u306e\u4e2d\u306e\u304a\u83d3\u5b50\u306e\u4fa1\u5024\u306e\u7dcf\u548c\u3092\u6700\u5927\u5316\u305b\u3088\u3002\u300d \u3053\u306e\u554f\u984c\u3082\u5168\u63a2\u7d22\u3068\u3001\u52d5\u7684\u8a08\u753b\u6cd5\u3067\u89e3\u3044\u3066\u307f\u3088\u3046\u3002","title":"\u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u554f\u984c"},{"location":"hard_computing/#_12","text":"\u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u554f\u984c\u306f\u3001\u5168\u3066\u306e\u5b9f\u88c5\u306b\u304a\u3044\u3066\u3001\u6a19\u6e96\u5165\u529b\u304b\u3089\u3001\u4ee5\u4e0b\u306e\u5f62\u5f0f\u3067\u554f\u984c\u3092\u53d7\u3051\u53d6\u308b\u3068\u3044\u3046\u3053\u3068\u306b\u3059\u308b\u3002 N\u3000W v_0 w_0 v_1 w_1 : v_N-1 w_N-1 \u3064\u307e\u308a\u3001\u6700\u521d\u306e1\u884c\u306b\u306f\u30b9\u30ca\u30c3\u30af\u306e\u500b\u6570\u304c\u66f8\u304b\u308c\u3066\u304a\u308a\u3001\u7d9a\u304f \\(N\\) \u884c\u306b\u306f\u305d\u308c\u305e\u308c \\(i\\) \u756a\u76ee\u306e\u30b9\u30ca\u30c3\u30af\u306e\u4fa1\u5024\u3068\u91cd\u3055\u304c\u66f8\u304b\u308c\u3066\u3044\u308b\u3002 \u307e\u305f\u3001\u4ee5\u4e0b\u306e\u5236\u7d04\u3082\u8ab2\u3059\u3053\u3068\u306b\u3059\u308b\u3002 \\(v_i, w_i\\) \u306f\u975e\u8ca0\u6574\u6570 \u5165\u529b\u3084\u7b54\u3048\u306f \\(10^{18}\\) \u3092\u8d85\u3048\u306a\u3044 \u4ee5\u4e0b\u306b\u5165\u529b\u3092\u53d7\u3051\u53d6\u3063\u3066\u3001\u4e8c\u6b21\u5143\u914d\u5217d\u306b\u5404\u8857\u306e\u9593\u306e\u8ddd\u96e2\u3092\u683c\u7d0d\u3059\u308b\u95a2\u6570\u306epython\u3067\u306e\u5b9f\u884c\u3092\u6319\u3052\u308b\u3002\u4ed6\u306e\u8a00\u8a9e\u3092\u4f7f\u3063\u3066\u3044\u308b\u4eba\u306f\u9069\u5b9c\u5b9f\u88c5\u3057\u306a\u304a\u3057\u3066\u307b\u3057\u3044\u3002 def read (): n , W = map ( int , input () . split ()) vs = [] ws = [] for i in range ( n ): v , w = map ( int , input () . split ()) vs . append ( v ) ws . append ( w ) return n , W , vs , ws \u3053\u306e\u90e8\u5206\u306f\u3069\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3082\u4f7f\u7528\u3059\u308b\u306e\u3067\u3001\u3069\u3053\u304b\u306b\u5225\u540d\u3067\u4fdd\u5b58\u3057\u3066\u304a\u304f\u3068\u826f\u3044\u3060\u308d\u3046\u3002","title":"\u5165\u529b\u5f62\u5f0f"},{"location":"hard_computing/#_13","text":"\u307e\u305a\u306f\u3001\u3069\u306e\u304a\u83d3\u5b50\u3092\u4f7f\u3063\u3066\u3001\u3069\u306e\u304a\u83d3\u5b50\u3092\u4f7f\u308f\u306a\u3044\u304b\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5168\u901a\u308a\u8a66\u3059\u5168\u63a2\u7d22\u3092\u5b9f\u88c5\u3057\u3088\u3046\u3002 \u304a\u83d3\u5b50\u306e\u7d44\u307f\u5408\u308f\u305b\u306f\u5de1\u56de\u30bb\u30fc\u30eb\u30b9\u30de\u30f3\u554f\u984c\u3068\u540c\u69d8\u306b\u4e8c\u9032\u6570\u3092\u4f7f\u3063\u3066\u8868\u305d\u3046\u3002 def brute_force ( n , W , vs , ws ): ans = 0 snacks = 0 for i in range ( 1 << n ): vsum = 0 wsum = 0 used = [] for j in range ( n ): if ( i & ( 1 << j )) == 0 : continue vsum += vs [ j ] wsum += ws [ j ] used . append ( j ) if wsum > W : continue if ans < vsum : ans = vsum snacks = used [:] print ( \"value\" , ans ) print ( \"snacks\" , snacks ) def main (): n , w , vs , ws = read () brute_force ( n , w , vs , ws ) main () \u3053\u306e\u524d\u63a2\u7d22\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u3001i\u306b\u95a2\u3059\u308bfor\u6587\u304c \\(O(2^N)\\) \u56de\u30eb\u30fc\u30d7\u3057\u3001\u4e2d\u306ej\u306b\u95a2\u3059\u308bfor\u6587\u304c \\(O(N)\\) \u56de\u30eb\u30fc\u30d7\u3059\u308b\u306e\u3067\u3001 \\(O(NN^2)\\) \u306e\u8a08\u7b97\u91cf\u3067\u3042\u308b\u3002 \u3053\u308c\u306f\u6307\u6570\u6642\u9593\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3042\u308b\u3002 \u5b9f\u88c5\u304c\u3067\u304d\u305f\u3089\u8a66\u3057\u306b\u3001\u4ee5\u4e0b\u306e\u5165\u529b\u3067\u52d5\u4f5c\u3092\u78ba\u8a8d\u3059\u308b\u3068\u826f\u3044\u3002 5 8 7 2 11 3 11 3 13 4 28 7","title":"\u5168\u63a2\u7d22\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"},{"location":"hard_computing/#_14","text":"\u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u554f\u984c\u306b\u304a\u3051\u308b\u52d5\u7684\u8a08\u753b\u6cd5\u306e\u30a2\u30a4\u30c7\u30a2\u306f\u3001\u300c \\(i\\) \u756a\u76ee\u306e\u304a\u83d3\u5b50\u307e\u3067\u306e\u4e2d\u304b\u3089\u3044\u304f\u3064\u304b\u3092\u9078\u3093\u3067\u91cd\u3055\u306e\u7dcf\u548c\u304c \\(j\\) \u306b\u306a\u308b\u7d44\u308f\u305b\u306e\u4fa1\u5024\u306e\u7dcf\u548c\u306e\u6700\u5927\u5024\u306f\u4f55\u304b\u300d\u3068\u3044\u3046\u90e8\u5206\u554f\u984c\u3092\u89e3\u304f\u3053\u3068\u3067\u3042\u308b\u3002 \u4e0a\u306e\u30ab\u30ae\u30ab\u30c3\u30b3\u3067\u56f2\u307e\u308c\u305f\u90e8\u5206\u306e\u7b54\u3048\u3068\u306a\u308b\u5024\u3092dp[i][j]\u3068\u3057\u3088\u3046\u3002\u3059\u308b\u3068 \\(dp[i][j] = max(dp[i-1][j], dp[i-1][j-w_i] + v_i)\\) \u304c\u3001\u6210\u7acb\u3059\u308b\u3002i\u304c\u5c0f\u3055\u3044\u9806\u306bdp\u914d\u5217\u3092\u57cb\u3081\u3066\u3044\u3051\u3070\u3001\u5168\u3066\u306e\u8981\u7d20\u304cO(1)\u3067\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 dp\u914d\u5217\u306e\u30b5\u30a4\u30ba\u306fO(NW)\u306a\u306e\u3067\u3001\u5168\u90e8\u3067O(NW)\u3067\u3053\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u52d5\u4f5c\u3059\u308b\u3002 \u4e00\u898b\u3053\u308c\u306f\u591a\u9805\u5f0f\u6642\u9593\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u898b\u3048\u308b\u304c\u3001W\u306f\u5165\u529b\u306e\u30b5\u30a4\u30ba\u3068\u306f\u95a2\u4fc2\u306a\u3044\u5024\u306a\u306e\u3067\uff08\u5f37\u3044\u3066\u8a00\u3046\u306a\u3089\u3070\u305d\u306e\u6841\u6570\u304c\u5165\u529b\u306e\u30b5\u30a4\u30ba\u3068\u306a\u308b\u306e\u3067\u3001\u6307\u6570\u30aa\u30fc\u30c0\u30fc\u3067\u5927\u304d\u304f\u306a\u308b\u5024)\u3001\u591a\u9805\u5f0f\u6642\u9593\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u306f\u306a\u3044\u3002 \u3053\u308c\u306f \u64ec\u591a\u9805\u5f0f\u6642\u9593\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 \u3067\u3042\u308b\u3002 \u4ee5\u4e0b\u306b\u5b9f\u88c5\u3092\u793a\u3059 def dynamic_programming ( n , W , vs , ws ): dp = [ 0 ] * ( W + 1 ) for i in range ( n ): for j in range ( W , ws [ i ] - 1 , - 1 ): dp [ j ] = max ( dp [ j ], dp [ j - ws [ i ]] + vs [ i ]) print ( \"value\" , max ( dp )) def main (): n , w , vs , ws = read () dynamic_programming ( n , w , vs , ws ) main ()","title":"\u52d5\u7684\u8a08\u753b\u6cd5"},{"location":"hard_computing/#_15","text":"\u4e0a\u306e\u5b9f\u88c5\u3067\u306f\u6700\u9069\u89e3\u304c\u8868\u793a\u3055\u308c\u308b\u3060\u3051\u3067\u3001\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u306b\u5165\u308c\u308b\u304a\u83d3\u5b50\u306f\u8868\u793a\u3055\u308c\u306a\u3044\u3002\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u66f8\u304d\u306a\u304a\u3057\u3066\u307f\u3088\u3002","title":"\u6f14\u7fd2"},{"location":"hard_computing/#_16","text":"\u5de1\u56de\u30bb\u30fc\u30eb\u30b9\u30de\u30f3\u554f\u984c\u3067\u3082\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u554f\u984c\u3067\u3082\u3001\u52d5\u7684\u8a08\u753b\u6cd5\u306f\u5168\u63a2\u7d22\u3088\u308a\u306f\u901f\u304f\u52d5\u3044\u305f\u304c\u305d\u308c\u3067\u3082\u6307\u6570\u6642\u9593\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306a\u306e\u3067\u5927\u304d\u306a\u30b5\u30a4\u30ba\u306e\u554f\u984c\u3092\u89e3\u304f\u306e\u306b\u306f\u6642\u9593\u304c\u304b\u304b\u308a\u3059\u304e\u3066\u3057\u307e\u3046\u3002 \u3057\u304b\u3057\u3001\u5fc5\u305a\u6b63\u3057\u3044\u6700\u77ed\u5de1\u56de\u8def\u9577\u3092\u8fd4\u3059\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u591a\u9805\u5f0f\u6642\u9593\u3067\u3042\u308b\u3082\u306e\u306f\u672a\u3060\u306b\u898b\u3064\u304b\u3063\u3066\u3044\u306a\u3044\u3002\u305d\u306e\u3088\u3046\u306a\u3082\u306e\u306f\u5b58\u5728\u3057\u306a\u3044\u3068\u3044\u3046\u4e88\u60f3\u3055\u3048\u3042\u308b\u3002 \u3053\u3053\u3067\u3001\u6700\u9069\u89e3\u3088\u308a\u5c11\u3057\u60aa\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u3001\u305d\u3093\u306a\u306b\u60aa\u304f\u306a\u3044\u89e3\u3092\u51fa\u3059\u3053\u3068\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u305f\u308a\u3001\u7d4c\u9a13\u7684\u306b\u308f\u304b\u3063\u3066\u3044\u305f\u308a\u3059\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u3044\u304f\u3064\u304b\u7d39\u4ecb\u3059\u308b\u3002","title":"\u8a08\u7b97\u56f0\u96e3\u554f\u984c\u306b\u5bfe\u3059\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"},{"location":"hard_computing/#_17","text":"\u5c71\u767b\u308a\u6cd5\u306f\u3001\u6700\u9069\u3067\u306f\u306a\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u89e3\u304b\u3089\u51fa\u767a\u3057\u3066\u3001\u89e3\u304c\u6539\u5584\u3059\u308b\u3088\u3046\u306b\u5c0f\u3055\u306a\u5909\u5316\u3092\u3064\u3051\u3066\u3044\u304f\u3001\u3053\u308c\u4ee5\u4e0a\u3069\u3046\u5909\u5316\u3055\u305b\u3066\u3082\u89e3\u306f\u6539\u5584\u3057\u306a\u3044\u3068\u3044\u3046\u72b6\u614b\u307e\u3067\u6301\u3063\u3066\u3044\u304f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3042\u308b\u3002 \u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u554f\u984c\u306e\u5834\u5408\u3001\u300c\u9069\u5f53\u306b\u304a\u83d3\u5b50\u3092\u8a70\u3081\u8fbc\u3093\u3060\u5f8c\u3001\u307e\u3060\u8a70\u3081\u8fbc\u3093\u3067\u306a\u3044\u3082\u306e\u3092\u3072\u3068\u3064\u9078\u3093\u3067\u3001\u305d\u308c\u3092\u8a70\u3081\u8fbc\u3081\u308b\u3088\u3046\u306b\u5225\u306e\u304a\u83d3\u5b50\u3092\u9069\u5f53\u306b\u53d6\u308a\u51fa\u3059\u3002\u3053\u306e\u8a70\u3081\u66ff\u3048\u3067\u304a\u83d3\u5b50\u306e\u4fa1\u5024\u306e\u548c\u304c\u5897\u3048\u308b\u306a\u3089\u3001\u3053\u306e\u8a70\u66ff\u3048\u3092\u5b9f\u65bd\u3057\u3001\u305d\u3046\u3067\u306a\u3044\u306a\u3089\u5b9f\u65bd\u3057\u306a\u3044\u300d\u3068\u3044\u3046\u306e\u3092\u4f55\u5ea6\u3082\u3084\u308b\u3053\u3068\u306f\u5c71\u767b\u308a\u6cd5\u306b\u306a\u308b\u3002 \u4ee5\u4e0b\u306b\u5c71\u767b\u308a\u6cd5\u3067\u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u554f\u984c\u3092\u89e3\u304fpython\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u793a\u3059\u3002 def climb ( n , W , vs , ws , trial = 100000 ): snacks = list ( range ( n )) knapsack = [] vsum = 0 wsum = 0 for _ in range ( trial ): cand = randint ( 0 , len ( snacks ) - 1 ) snack = snacks [ cand ] if W - wsum >= ws [ snack ]: knapsack . append ( snack ) vsum += vs [ snack ] wsum += ws [ snack ] del snacks [ cand ] continue tw = wsum tv = vsum tk = knapsack [:] go_back = [] while W - tw < ws [ snack ]: tmp = randint ( 0 , len ( tk ) - 1 ) ts = tk [ tmp ] go_back . append ( ts ) del tk [ tmp ] tw -= ws [ ts ] tv -= vs [ ts ] tw += ws [ snack ] tv += vs [ snack ] tk . append ( snack ) if tv > vsum : vsum = tv wsum = tw knapsack = tk [:] snacks += go_back del snacks [ cand ] print ( \"value\" , vsum ) print ( \"snacks\" , sorted ( knapsack )) def main (): n , w , vs , ws = read () climb ( n , w , vs , ws ) main () \u5c71\u767b\u308a\u6cd5\u306f\u3001\u6700\u9069\u89e3\u306e\u5230\u7740\u3059\u308b\u307e\u3067\u52d5\u304b\u3057\u7d9a\u3051\u308c\u3070\u826f\u3044\u306e\u3060\u304c\u3001\u6700\u9069\u89e3\u3058\u3083\u306a\u3044\u3068\u3053\u308d\u306b\u3068\u3069\u307e\u3063\u3066\u3057\u307e\u3063\u305f\u308a\u3001\u305d\u3082\u305d\u3082\u6700\u9069\u89e3\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\u304c\u96e3\u3057\u304b\u3063\u305f\u308a\u3059\u308b\u306e\u3067\u3001\u901a\u5e38\u306f\u4f55\u56de\u30eb\u30fc\u30d7\u3092\u56de\u3059\u304b\u3092\u6307\u5b9a\u3057\u3066\u52d5\u304b\u3059\u3053\u3068\u304c\u591a\u3044\u3002 \u305d\u306e\u305f\u3081\u3001\u6700\u9069\u89e3\u304c\u5f97\u3089\u308c\u308b\u4fdd\u8a3c\u306f\u7121\u3044\u304c\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u8d70\u308b\u6642\u9593\u3092\u81ea\u7531\u306b\u8abf\u7bc0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002","title":"\u5c71\u767b\u308a\u6cd5"},{"location":"hard_computing/#_18","text":"\u5de1\u56de\u30bb\u30fc\u30eb\u30b9\u30de\u30f3\u554f\u984c\u3092\u5c71\u767b\u308a\u6cd5\u3067\u89e3\u304f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3002 \u5de1\u56de\u30bb\u30fc\u30eb\u30b9\u30de\u30f3\u554f\u984c\u306b\u304a\u3051\u308b\u5c71\u767b\u308a\u306e\u4f8b\u3068\u3057\u3066\u3001\u9069\u5f53\u306a2\u3064\u306e\u8857\u306e\u8a2a\u308c\u308b\u9806\u5e8f\u306e\u5165\u308c\u66ff\u3048\u3092\u3001\u7d4c\u8def\u9577\u304c\u6539\u5584\u3055\u308c\u305f\u3089\u5b9f\u65bd\u3057\u3001\u305d\u3046\u3067\u306a\u3044\u306a\u3089\u5b9f\u65bd\u3057\u306a\u3044\u3068\u3044\u3046\u306e\u3092\u4f55\u56de\u3082\u884c\u3046\u3082\u306e\u3067\u3042\u308b\u3002","title":"\u6f14\u7fd2(\u8208\u5473\u304c\u3042\u308c\u3070)"},{"location":"hard_computing/#_19","text":"\u713c\u304d\u306a\u307e\u3057\u6cd5\u306f\u3001\u5c71\u767b\u308a\u6cd5\u3092\u6539\u826f\u3057\u305f\u3082\u306e\u3067\u3042\u308b\u3002\u5c71\u767b\u308a\u6cd5\u306f\u3001\u3068\u306b\u304b\u304f\u89e3\u304c\u826f\u304f\u306a\u308b\u65b9\u5411\u306b\u9032\u307f\u7d9a\u3051\u308b\u65b9\u91dd\u3067\u3042\u308b\u304c\u3001\u5c40\u6240\u7684\u306b\u6700\u9069\u3060\u304c\u3001\u5168\u4f53\u3068\u3057\u3066\u306f\u6700\u9069\u3067\u306f\u306a\u3044\u89e3\u306b\u3068\u3069\u307e\u3063\u3066\u3057\u307e\u3046\u3053\u3068\u304c\u6709\u308b\u3002 \u305d\u3053\u3067\u3001\u4f4e\u78ba\u7387\u3067\u89e3\u304c\u60aa\u304f\u306a\u308b\u65b9\u5411\u306b\u3082\u9032\u3080\u3088\u3046\u306b\u3059\u308b\u3068\u3044\u3046\u306e\u304c\u713c\u304d\u306a\u307e\u3057\u6cd5\u3067\u3042\u308b\u3002\u5b9f\u88c5\u306f\u307b\u3068\u3093\u3069\u5c71\u767b\u308a\u6cd5\u3068\u540c\u3058\u3060\u304c\u3001\u5909\u66f4\u3092\u52a0\u3048\u308b\u304b\u52a0\u3048\u306a\u3044\u304b\u306e\u5224\u65ad\u306e\u6761\u4ef6\u5f0f\u304c\u5c11\u3057\u5897\u3048\u308b\u3002 from random import randint def anealing ( n , W , vs , ws , trial = 100000 ): snacks = list ( range ( n )) knapsack = [] vsum = 0 wsum = 0 ans = 0 ansknapsack = [] for _ in range ( trial ): cand = randint ( 0 , len ( snacks ) - 1 ) snack = snacks [ cand ] if W - wsum >= ws [ snack ]: knapsack . append ( snack ) vsum += vs [ snack ] wsum += ws [ snack ] del snacks [ cand ] continue tw = wsum tv = vsum tk = knapsack [:] go_back = [] while W - tw < ws [ snack ]: tmp = randint ( 0 , len ( tk ) - 1 ) ts = tk [ tmp ] go_back . append ( ts ) del tk [ tmp ] tw -= ws [ ts ] tv -= vs [ ts ] tw += ws [ snack ] tv += vs [ snack ] tk . append ( snack ) if tv > vsum or randint ( 0 , trial ) < ( trial / _ ): vsum = tv wsum = tw knapsack = tk [:] snacks += go_back del snacks [ cand ] if ans < vsum : ans = vsum ansknapsack = knapsack [:] print ( \"value\" , ans ) print ( \"snacks\" , sorted ( ansknapsack )) def main (): n , w , vs , ws = read () climb ( n , w , vs , ws ) main () \u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u554f\u984c\u306e\u5834\u5408\u3001\u63a2\u7d22\u7a7a\u9593\u306b\u7f6e\u3044\u3066\u8fd1\u508d\u304c\u5e83\u3044\u305f\u3081\u3001\u713c\u304d\u306a\u307e\u3057\u6cd5\u3068\u5c71\u767b\u308a\u6cd5\u3067\u3042\u307e\u308a\u7d50\u679c\u306b\u5dee\u304c\u3064\u304b\u306a\u3044\u3002 \u8fd1\u508d\u304c\u305d\u3093\u306a\u306b\u591a\u304f\u306a\u3044\u5c71\u767b\u308a\u6cd5\u3092\u4f7f\u3046\u5de1\u56de\u30bb\u30fc\u30eb\u30b9\u30de\u30f3\u554f\u984c\u306a\u3069\u3067\u306f\u3001\u713c\u304d\u306a\u307e\u3057\u6cd5\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u3067\u7d50\u679c\u304c\u826f\u304f\u306a\u308b\u3053\u3068\u304c\u898b\u8fbc\u3081\u308b\u3002","title":"\u713c\u304d\u306a\u307e\u3057\u6cd5"},{"location":"hard_computing/#_20","text":"\u69d8\u3005\u306a\u30b5\u30a4\u30ba\u306e\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u554f\u984c\u3092\u7528\u610f\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30b9\u30d4\u30fc\u30c9\u3068\u3001\u89e3\u7b54\u306e\u7cbe\u5ea6\u3092\u6bd4\u3079\u3066\u307f\u3088\u3002","title":"\u6f14\u7fd2\u554f\u984c"},{"location":"hard_computing/#_21","text":"\u8fd1\u4f3c\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u591a\u9805\u5f0f\u6642\u9593\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u306a\u304b\u3067\u3001\u6700\u9069\u304b\u3089\u305d\u3093\u306a\u306b\u96e2\u308c\u3066\u3044\u306a\u3044\u89e3\u3092\u8fd4\u3059\u3053\u3068\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3042\u308b\u3002 \u305f\u3068\u3048\u3070\u3001\u6700\u5c0f\u5024\u306e2\u500d\u3088\u308a\u306f\u5c0f\u3055\u3044\u5024\u3092\u8fd4\u3059\u3053\u3068\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u8fd1\u4f3c\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u4f8b\u3067\u3042\u308a\u30012-\u8fd1\u4f3c\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u547c\u3070\u308c\u308b\u3002 \u4ee5\u4e0b\u3067\u306f\u3001\u5de1\u56de\u30bb\u30fc\u30eb\u30b9\u30de\u30f3\u554f\u984c\u306e2\u8fd1\u4f3c\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7d39\u4ecb\u3059\u308b\u3002 \u305f\u3060\u3057\u3001\u3053\u308c\u3089\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u4e09\u89d2\u4e0d\u7b49\u5f0f\u304c\u6210\u308a\u7acb\u3064\u3053\u3068\u304c\u524d\u63d0\u3068\u306a\u3063\u3066\u3044\u308b\u3002","title":"\u8fd1\u4f3c\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"},{"location":"hard_computing/#_22","text":"\u6700\u8fd1\u633f\u5165\u6cd5\u306f\u3001\u88570\u3060\u3051\u304b\u3089\u306a\u308b\u5de1\u56de\u8def\u306b\u3001\u3044\u307e\u306e\u5de1\u56de\u8def\u306b\u8fd1\u3044\u8857\u304b\u3089\u9806\u306b\u3072\u3068\u3064\u305a\u3064\u5de1\u56de\u8def\u306b\u633f\u5165\u3057\u3066\u3044\u304f\u65b9\u6cd5\u3067\u3042\u308b\u3002 \u53b3\u5bc6\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u306a\u308b\u3002 S=[0]\u3068\u3059\u308b S\u306b\u542b\u307e\u308c\u308b\u8857\u3068\u3001\u305d\u308c\u4ee5\u5916\u306e\u8857\u306e\u8ddd\u96e2\u306e\u4e2d\u3067\u3001\u6700\u3082\u77ed\u3044\u3082\u306e\u3092\u898b\u3064\u3051\u3066\u304f\u308b\u3002S\u306b\u542b\u307e\u308c\u308b\u65b9\u3092u, \u542b\u307e\u308c\u306a\u3044\u65b9\u3092v\u3068\u3059\u308b\u3002 S\u306e\u306a\u304b\u3067u\u306e\u76f4\u5f8c\u306bv\u3092\u633f\u5165\u3059\u308b\u3002 \u5168\u3066\u306e\u8857\u304cS\u306b\u542b\u307e\u308c\u305f\u306a\u3089\u7d42\u4e86\u3057\u3001\u305d\u3046\u3067\u306a\u3044\u306a\u30892\u306b\u623b\u308b\u3002 \u5b9f\u969b\u306b\u5b9f\u88c5\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b INF = 10 ** 10 def read (): n = int ( input ()) d = [] for i in range ( n ): d . append ( list ( map ( int , input () . split ()))) return n , d def distance ( route , d ): ret = 0 for i in range ( len ( route ) - 1 ): ret += d [ route [ i ]][ route [ i + 1 ]] return ret def solve ( n , d ): route = [ 0 ] used = [ False ] * n used [ 0 ] = True dist = d [ 0 ] neighb = [ 0 ] * n for i in range ( n - 1 ): nxt = - 1 td = INF for j in range ( n ): if used [ j ]: continue if td > dist [ j ]: nxt = j td = dist [ j ] ne = neighb [ nxt ] ind = route . index ( ne ) route = route [: ne ] + [ nxt ] + route [ ne :] used [ nxt ] = True for j in range ( n ): if used [ j ]: continue if dist [ j ] > d [ nxt ][ j ]: dist [ j ] = d [ nxt ][ j ] neighb [ j ] = nxt ind = route . index ( 0 ) route = route [ ind :] + route [: ind ] print ( \"dist\" , distance ( route + [ 0 ], d )) print ( \"route\" , route + [ 0 ]) def main (): n , d = read () solve ( n , d ) main ()","title":"\u6700\u8fd1\u633f\u5165\u6cd5"},{"location":"hard_computing/#_23","text":"\u81ea\u5206\u3067\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u4f5c\u3063\u3066\u307f\u3066\u6700\u8fd1\u633f\u5165\u6cd5\u3092\u8a66\u3057\u3066\u307f\u3088\u3002\u5c0f\u3055\u3044\u30b1\u30fc\u30b9\u3067\u306f\u52d5\u7684\u8a08\u753b\u6cd5\u304c\u8fd4\u3059\u6700\u9069\u89e3\u3068\u6bd4\u8f03\u3057\u3066\u30012\u8fd1\u4f3c\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u304b\u3081\u3088\u3002","title":"\u6f14\u7fd2\u554f\u984c"},{"location":"hard_computing/#_24","text":"2\u6b21\u5143\u5e73\u9762\u4e0a\u306eN\u70b9\u306e\u6700\u77ed\u5de1\u56de\u8def\u3092\u3082\u3068\u3081\u3066\u53ef\u8996\u5316\u3057\u3066\u307f\u3088\u3002javascript\u3084PIL\u3084gnuplot\u3092\u4f7f\u3063\u3066\u3082\u826f\u3044\u304c\u3001Processing\u304c\u66f8\u3051\u308b\u306a\u3089\u3070\u3001Processing\u306e\u30b3\u30fc\u30c9\u3092\u51fa\u529b\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u308b\u306e\u304c\u4e00\u756a\u697d\u3060\u308d\u3046\u3002","title":"\u6f14\u7fd2\u554f\u984c"},{"location":"hard_computing/#_25","text":"\u3053\u306e\u30da\u30fc\u30b8 \u306b\u5927\u304d\u3081\u306a\u5165\u51fa\u529b\u4f8b\u304c\u3042\u308b\u3002\u8a66\u3057\u3066\u307f\u3088\u3046\u3002","title":"\u5927\u304d\u3081\u306a\u5165\u51fa\u529b\u4f8b"},{"location":"hard_computing/#tspvisualizer","text":"Visualizer \u5165\u529b\u306e\u756a\u53f7\u3092\u9078\u3093\u3067SetInput\u3092\u62bc\u3059\u3068\u70b9\u304c\u63cf\u753b\u3055\u308c\u308b\u3002 \u30eb\u30fc\u30c8\u306f\u7a7a\u767d\u533a\u5207\u308a\u3067\u3081\u3050\u308b\u9806\u756a\u3092\u5165\u308c\u308c\u3070\u3088\u3044\u3002\u6700\u5f8c\u306b\u51fa\u767a\u5730\u70b9\u3092\u8ffd\u52a0\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u3002","title":"TSP\u306eVisualizer"},{"location":"lang_processor/","text":"\u8a00\u8a9e\u51e6\u7406\u7cfb \u8a00\u8a9e\u51e6\u7406\u7cfb \u3068\u3044\u3046\u306e\u306f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3092\u53d7\u3051\u53d6\u3063\u3066\u3001\u4f55\u3089\u304b\u306e\u51e6\u7406\u3092\u3057\u3066\u304f\u308c\u308b\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306e\u3053\u3068\u3067\u3042\u308b\u3002Processing, Python, C/C++\u306a\u3069\u69d8\u3005\u306a\u8a00\u8a9e\u304c\u3042\u308b\u304c\u3001\u4eba\u9593\u304c\u66f8\u3044\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304c\u7121\u4e8b\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u3057\u3066\u5b9f\u884c\u3055\u308c\u308b\u307e\u3067\u306b\u306f\u3001\u8a00\u8a9e\u51e6\u7406\u7cfb\u304c\u9593\u306b\u631f\u307e\u3063\u3066\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u89e3\u91c8\u3084\u3001\u6a5f\u68b0\u8a9e\u3078\u306e\u5909\u63db\u3092\u884c\u3063\u3066\u3044\u308b\u3002 \u672c\u30c6\u30fc\u30de\u3067\u306f\u3001\u3044\u308d\u3044\u308d\u306a\u30bf\u30a4\u30d7\u306e\u8a00\u8a9e\u51e6\u7406\u7cfb\u3092\u4f5c\u3063\u3066\u307f\u3066\u3001\u6700\u7d42\u7684\u306b\u306f\u3072\u3068\u3064\u8a00\u8a9e\u3092\u81ea\u4f5c\u3059\u308b\u306a\u3069\u3057\u3066\u3082\u3089\u3046\u3002 \u3053\u306e\u30da\u30fc\u30b8\u3067\u306f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u5168\u3066Python3\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u304c\u3001\u53d7\u8b1b\u8005\u304c\u597d\u304d\u306a\u8a00\u8a9e\u3092\u4f7f\u3063\u3066\u3082\u3089\u3063\u3066\u69cb\u308f\u306a\u3044\u3002 \u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3068\u30b3\u30f3\u30d1\u30a4\u30e9 \u8a00\u8a9e\u51e6\u7406\u7cfb\u306f \u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u578b \u3068 \u30b3\u30f3\u30d1\u30a4\u30e9\u578b \u306b\u5927\u5225\u3055\u308c\u308b\u3002 \u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u578b\u8a00\u8a9e\u306f\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u6a5f\u68b0\u8a9e\u306b\u7ffb\u8a33\u305b\u305a\u306b\u5b9f\u884c\u3059\u308b\u8a00\u8a9e\u51e6\u7406\u7cfb\u3067\u3042\u308b\u3002Python, Ruby\u306a\u3069\u304c\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u578b\u8a00\u8a9e\u306e\u4f8b\u3067\u3042\u308b\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4e0a\u304b\u3089\u9806\u756a\u306b\u8aad\u3093\u3067\u3044\u3063\u3066\u9010\u4e00\u5b9f\u884c\u3059\u308b\u3060\u3051\u3001\u3068\u3044\u3046\u5b9f\u88c5\u304c\u591a\u3044\u306e\u3067\u3001\u5bfe\u8a71\u578b\u30b3\u30f3\u30bd\u30fc\u30eb\u3068\u306e\u76f8\u6027\u304c\u3088\u3044\u3002 \u305d\u308c\u306b\u5bfe\u3057\u3066\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u578b\u8a00\u8a9e\u306f\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u4e00\u5ea6\u6a5f\u68b0\u8a9e\u306b\u5909\u63db\u3057\u3066\u304b\u3089\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3002\u4e00\u822c\u306b\u306f\u6a5f\u68b0\u8a9e\u306b\u5909\u63db\u3059\u308b\u3068\u3053\u308d\u307e\u3067\u304c\u30b3\u30f3\u30d1\u30a4\u30e9\u578b\u8a00\u8a9e\u51e6\u7406\u7cfb\u306e\u4ed5\u4e8b\u3067\u3042\u308b\u3002\u4f8b\u3048\u3070C\u8a00\u8a9e\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3068a.exe\u306a\u3069\u3068\u8a00\u3063\u305f\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u51fa\u6765\u4e0a\u304c\u308b\u304c\u3001\u3053\u308c\u304c\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304c\u6a5f\u68b0\u8a9e\u306b\u7ffb\u8a33\u3055\u308c\u305f\u3082\u306e\u3067\u3042\u308b\u3002 \u6a5f\u68b0\u8a9e\u306b\u5909\u63db\u3059\u308b\u307e\u3067\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u304c\u3001\u305d\u306e\u5f8c\u306e\u5b9f\u884c\u901f\u5ea6\u306f\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u578b\u3068\u6bd4\u8f03\u3059\u308b\u3068\u901f\u304f\u306a\u308b\u3002 \u30b3\u30f3\u30d1\u30a4\u30eb\u578b\u539f\u7881\u3092\u81ea\u4f5c\u3059\u308b\u5834\u5408\u306f\u6a5f\u68b0\u8a9e\u306e\u77e5\u8b58\u304c\u5fc5\u8981\u3067\u3001\u5c11\u3057\u96e3\u3057\u3044\u306e\u3067\u3001\u4eca\u56de\u306f\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u578b\u8a00\u8a9e\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u306b\u3059\u308b\u3002 HQ9+ \u307e\u305a\u306f HQ9+ \u3068\u3044\u3046\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306e\u51e6\u7406\u7cfb\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3002 HQ9+\u306f\u307b\u3068\u3093\u3069\u4f55\u3082\u3067\u304d\u306a\u3044\u30b8\u30e7\u30fc\u30af\u8a00\u8a9e\u3060\u304c\u3001\u51e6\u7406\u7cfb\u3092\u4f5c\u308b\u7df4\u7fd2\u3068\u3057\u3066\u9078\u3076\u306b\u306f\u826f\u3044\u8a00\u8a9e\u3067\u3042\u308b\u3002 HQ9+ \u306e\u4ed5\u69d8 HQ9+\u306e\u4ed5\u69d8\u3092\u4ee5\u4e0b\u306b\u6319\u3052\u308b\u3002 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u5148\u982d\u304b\u3089\u9806\u306b\u8aad\u3093\u3067\u3044\u304f\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u578b\u8a00\u8a9e\u3067\u3042\u308b\u3002 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u3044\u304d'H'\u304c\u51fa\u3066\u304d\u305f\u3089\u3001'Hello, World!'\u3092\u51fa\u529b\u3059\u308b\u3002 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u3044\u304d'Q'\u304c\u51fa\u3066\u304d\u305f\u3089\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u51fa\u529b\u3059\u308b\u3002 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u3044\u304d'9'\u304c\u51fa\u3066\u304d\u305f\u3089\u3001\"99 Bottles of Beer\"\u306e \u6b4c\u8a5e \u3092\u51fa\u529b\u3059\u308b\u3002 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u3044\u304d'+'\u304c\u51fa\u3066\u304d\u305f\u3089\u3001\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u306e\u5024\u30921\u5897\u3084\u3059\u3002 \u305d\u308c\u4ee5\u5916\u306e\u6587\u5b57\u304c\u51fa\u3066\u304d\u305f\u5834\u5408\u306f\u3001\u4f55\u3082\u3057\u306a\u3044\u3002 \u3053\u3053\u3067\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u3068\u3044\u3046\u306e\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u88cf\u5074\u306b\u3042\u308b\u5909\u6570\u3060\u3068\u601d\u3063\u3066\u3082\u3089\u3048\u308c\u3070\u826f\u3044\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u958b\u59cb\u6642\u306b\u306f\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u306f0\u306b\u521d\u671f\u5316\u3055\u308c\u3066\u3044\u308b\u3002 \u3053\u306e\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u306e\u5024\u3092\u51fa\u529b\u3059\u308b\u3053\u3068\u306f\u306a\u3044\u306e\u3067\u3001\u5b9f\u969b\u306b\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u3092\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u306e\u3060\u304c\u3001\u7df4\u7fd2\u306e\u305f\u3081\u306b\u4eca\u56de\u306f\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3046\u3002 HQ9+ \u306e\u5b9f\u88c5 \u307e\u305a\u96db\u5f62\u3068\u3057\u3066\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u307f\u53d6\u308b\u95a2\u6570 read_code \u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3002 \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u304b\u3089\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u30d1\u30b9\u3092\u8aad\u307f\u53d6\u308a\u3001\u305d\u306e\u5185\u5bb9\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3042\u308b\u3002 \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306e\u500b\u6570\u304c\u304a\u304b\u3057\u304b\u3063\u305f\u308a\u3001\u4e0e\u3048\u3089\u308c\u305f\u30d1\u30b9\u304c\u5b58\u5728\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u3082\u9069\u5207\u306b\u30a8\u30e9\u30fc\u51e6\u7406\u3092\u3059\u308b\u3002 sys.argv \u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306e\u914d\u5217\u3067\u3042\u308b\u3002 python hoge.py fuga piyo \u3068\u3044\u3046\u3075\u3046\u306b hoge.py \u3092\u5b9f\u884c\u3057\u305f\u306a\u3089\u3070 sys.argv \u306f [\"hoge.py\", \"fuga\", \"piyo\"] \u3068\u306a\u308b\u3002 import sys import os.path argvs = sys . argv argc = len ( argvs ) def read_code (): if argc == 1 : print ( \"no source file\" ) exit () if argc > 2 : print ( \"too many arguments\" ) exit () filename = argvs [ 1 ] if not os . path . exists ( filename ): print ( \"no such file: {} \" . format ( filename )) exit () with open ( filename , \"r\" ) as f : sourcecode = f . read () return sourcecode \u3053\u306e\u96db\u5f62\u306f\u4ed6\u306e\u8a00\u8a9e\u3092\u4f5c\u308b\u3068\u304d\u306b\u3082\u5229\u7528\u3059\u308b\u306e\u3067\u30ed\u30fc\u30ab\u30eb\u306b\u540d\u524d\u3092\u4ed8\u3051\u3066\u4fdd\u5b58\u3057\u3066\u304a\u304f\u3068\u826f\u3044\u3060\u308d\u3046\u3002 \u6b21\u306b\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u9806\u306b\u8aad\u307f\u3001\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u3044\u304f\u95a2\u6570 process(sourcecode) \u3092\u66f8\u3053\u3046\u3002\u5404\u30b3\u30de\u30f3\u30c9\u306e\u51e6\u7406\u306f\u307e\u3060\u5177\u4f53\u7684\u306b\u66f8\u304b\u305a\u3001\u95a2\u6570\u306e\u5f62\u3067\u7f6e\u3044\u3066\u304a\u304f\u3002 def process ( sourcecode ): accumulator = 0 for c in sourcecode : if c == 'H' : command_h () if c == 'Q' : command_q ( sourcecode ) if c == '9' : command_9 () if c == '+' : command_plus () \u3042\u3068\u306f\u3001\u305d\u308c\u305e\u308c\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\u3060\u3051\u3067\u3042\u308b\u3002\u3053\u3053\u3067\u306fH\u3068+\u306e\u5b9f\u88c5\u4f8b\u3092\u793a\u3059\u306e\u3067\u3001\u6b8b\u308a\u306e2\u30b3\u30de\u30f3\u30c9\u306f\u81ea\u5206\u3067\u5b9f\u88c5\u3057\u3066\u307f\u3066\u307b\u3057\u3044\u3002 def command_h (): print ( \"Hello, World!\" ) def command_plus (): global accumulator accumulator += 1 def command_9 (): #\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b pass def command_q ( sourcecode ): #\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b pass \u3053\u308c\u3089\u3092\u5b9f\u88c5\u3057\u7d42\u308f\u3063\u305f\u3042\u3068\u306f\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u6700\u5f8c\u306b\u8ffd\u52a0\u3059\u308c\u3070\u3001\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002 def main (): sourcecode = read_code () process ( sourcecode ) if __name__ == \"__main__\" : main () \u6f14\u7fd2:\u81ea\u4f5c\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u3066\u307f\u3088\u3046 HQ9+\u306f\u898b\u3066\u306e\u901a\u308a\u4f4e\u6a5f\u80fd\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3067\u3042\u308b\u3002\u3053\u3053\u306b\u81ea\u5206\u306e\u597d\u304d\u306a\u30b3\u30de\u30f3\u30c9\u3092\u8ffd\u52a0\u3057\u3066\u307f\u3088\u3046\u3002\u4ee5\u4e0b\u306b\u6319\u3052\u308b\u306e\u306f\u8b1b\u5e2b\u304c\u601d\u3044\u3064\u3044\u305f\u4f8b\u3067\u3042\u308b\u304c\u3001\u3053\u3053\u306b\u306a\u3044\u3082\u306e\u3067\u3082\u3088\u3044\u3002 F\u30b3\u30de\u30f3\u30c9: 1\u304b\u3089100\u307e\u3067\u306eFizzBuzz\u3092\u51fa\u529b\u3059\u308b O\u30b3\u30de\u30f3\u30c9\uff1a\u30a2\u30ad\u30e5\u30df\u30e5\u30ec\u30fc\u30bf\u306e\u5024\u3092\u51fa\u529b\u3059\u308b -\u30b3\u30de\u30f3\u30c9\uff1a\u30a2\u30ad\u30e5\u30df\u30e5\u30ec\u30fc\u30bf\u306e\u5024\u30921\u6e1b\u3089\u3059 BrainF**k \u6b21\u306b\u3001HQ9+\u3088\u308a\u9ad8\u6a5f\u80fd\u306a BrainF**k \u306e\u5b9f\u88c5\u3092\u3057\u3066\u307f\u3088\u3046\u3002BrainF**k\u306f\u30c1\u30e5\u30fc\u30ea\u30f3\u30b0\u5b8c\u5168\u3068\u3044\u3063\u3066\u3001\u30c1\u30e5\u30fc\u30ea\u30f3\u30b0\u30de\u30b7\u30f3\u3068\u540c\u7b49\u306e\u51e6\u7406\u80fd\u529b\u304c\u6709\u308b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3067\u3042\u308b\u3002C/C++\u3084Python\u306e\u3088\u3046\u306a\u3001\u3044\u308f\u3086\u308b\u300c\u306a\u3093\u3067\u3082\u3067\u304d\u308b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u300d\u3060\u3068\u8003\u3048\u3066\u3082\u3089\u3063\u3066\u69cb\u308f\u306a\u3044\u3002 BrainF**k\u306e\u4ed5\u69d8 BrainF**k\u306e\u4ed5\u69d8\u3092\u4ee5\u4e0b\u306b\u6319\u3052\u308b\u3002 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u5148\u982d\u304b\u3089\u9806\u306b\u8aad\u3093\u3067\u3044\u304f\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u578b\u8a00\u8a9e\u3067\u3042\u308b\u3002 '>'\u304c\u51fa\u3066\u304d\u305f\u3089\u3001\u30dd\u30a4\u30f3\u30bf\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u3002 '<'\u304c\u51fa\u3066\u304d\u305f\u3089\u3001\u30dd\u30a4\u30f3\u30bf\u3092\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u3002 '+'\u304c\u51fa\u3066\u304d\u305f\u3089\u3001\u30dd\u30a4\u30f3\u30bf\u304c\u6307\u3057\u3066\u3044\u308b\u5024\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u3002 '-'\u304c\u51fa\u3066\u304d\u305f\u3089\u3001\u30dd\u30a4\u30f3\u30bf\u304c\u6307\u3057\u3066\u3044\u308b\u5024\u3092\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u3002 '.'\u304c\u51fa\u3066\u304d\u305f\u3089\u3001\u30dd\u30a4\u30f3\u30bf\u304c\u6307\u3059\u5024\u306e\u6587\u5b57\u30b3\u30fc\u30c9\u3092\u6301\u3064\u6587\u5b57\u3092\u51fa\u529b\u3059\u308b\u3002 ','\u304c\u51fa\u3066\u304d\u305f\u3089\u3001\u5165\u529b\u304b\u30891\u6587\u5b57\u8aad\u307f\u8fbc\u3093\u3067\u3001\u305d\u306e\u6587\u5b57\u30b3\u30fc\u30c9\u306e\u5024\u3092\u30dd\u30a4\u30f3\u30bf\u304c\u6307\u3059\u5148\u306b\u4ee3\u5165\u3059\u308b\u3002 '['\u304c\u51fa\u3066\u304d\u305f\u3089\u3001\u30dd\u30a4\u30f3\u30bf\u304c\u6307\u3059\u5024\u304c0\u306a\u3089\u5bfe\u5fdc\u3059\u308b']'\u306b\u30b8\u30e3\u30f3\u30d7\u3059\u308b\u3002 ']'\u304c\u51fa\u3066\u304d\u305f\u3089\u3001\u30dd\u30a4\u30f3\u30bf\u304c\u6307\u3059\u5024\u304c0\u3067\u306a\u3044\u306a\u3089\u3001\u5bfe\u5fdc\u3059\u308b'['\u306b\u30b8\u30e3\u30f3\u30d7\u3059\u308b\u3002 \u305d\u308c\u4ee5\u5916\u306e\u6587\u5b57\u304c\u51fa\u3066\u304d\u305f\u5834\u5408\u306f\u3001\u4f55\u3082\u3057\u306a\u3044\u3002 \u4ed5\u69d8\u306b\u51fa\u3066\u304d\u305f\u300c\u30dd\u30a4\u30f3\u30bf\u300d\u3068\u3044\u3046\u5358\u8a9e\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u3088\u3046\u3002 HQ9+\u3067\u306f\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u3068\u3044\u3046\u5909\u6570\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u3042\u3063\u305f\u304c\u3001BrainF**k\u3067\u306f\u7121\u9650\u306b\u9577\u3044\u4e00\u6b21\u5143\u914d\u5217\u304c\u88cf\u306b\u3042\u308b\u3068\u8003\u3048\u3066\u3082\u3089\u3063\u3066\u3088\u3044\u3002 \u306f\u3058\u3081\u3001\u305d\u306e\u914d\u5217\u306e\u5024\u306f\u5168\u30660\u3067\u521d\u671f\u5316\u3055\u308c\u3066\u304a\u308a\u3001\u30dd\u30a4\u30f3\u30bf\u304c\u3042\u308b\u8981\u7d20\u3092\u6307\u3057\u3066\u3044\u308b\u3002 \u30dd\u30a4\u30f3\u30bf\u304c\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3055\u308c\u308b\u3068\u3001\u305d\u306e\u3072\u3064\u6b21\u306e\u8981\u7d20\u3092\u6307\u3059\u3088\u3046\u306b\u306a\u308a\u3001\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u3068\u3001\u305d\u306e\u4e00\u3064\u524d\u306e\u8981\u7d20\u3092\u6307\u3059\u3088\u3046\u306b\u306a\u308b\u3002 \u30dd\u30a4\u30f3\u30bf\u304c\u6307\u3059\u8981\u7d20\u306e\u5024\u3092\u5909\u3048\u305f\u3044\u306a\u3089\u3070'+'\u3084'-'\u3092\u4f7f\u3063\u3066\u5024\u3092\u66f8\u304d\u63db\u3048\u308b\u3002 \u307e\u305f\u3001'.',','\u3067\u30dd\u30a4\u30f3\u30bf\u306e\u6307\u3059\u5024\u306e\u6587\u5b57\u30b3\u30fc\u30c9\u306b\u5bfe\u5fdc\u3059\u308b\u6587\u5b57\u304c\u306a\u3044\u3068\u3046\u307e\u304f\u52d5\u304b\u306a\u3044\u306e\u3067\u3001'+'\u3084'-'\u30b3\u30de\u30f3\u30c9\u306f256\u3067\u5272\u3063\u305f\u3042\u307e\u308a\u3092\u52d5\u304f\u3068\u3059\u308b\u3002\u3064\u307e\u308a255\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u30680, 0\u3092\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u3068255\u306b\u306a\u308b\u4ed5\u69d8\u3067\u3042\u308b\u3068\u3059\u308b\u3002 BrainF**k\u306e\u5b9f\u88c5 read_code \u306fHQ9+\u3068\u540c\u3058\u3082\u306e\u3092\u4f7f\u3063\u3066\u69cb\u308f\u306a\u3044\u3002 HQ9+\u306e\u3068\u304d\u306f\u30a2\u30ad\u30e5\u30df\u30e5\u30ec\u30fc\u30bf\u3092\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3068\u3057\u3066\u5b9f\u88c5\u3057\u305f\u304c\u3001\u5b9f\u969b\u306b\u306f\u3053\u306e\u3088\u3046\u306a\u5b9f\u88c5\u306f\u3042\u307e\u308a\u7f8e\u3057\u304f\u306a\u3044\u3002\u4eca\u56de\u306fBF\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u3066\u3001\u5404\u30b3\u30de\u30f3\u30c9\u3084\u5185\u90e8\u74b0\u5883\u3092\u305d\u306e\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u3057\u3066\u5b9f\u88c5\u3057\u3088\u3046\u3002 \u5b9f\u969b\u306b\u7121\u9650\u306b\u9577\u3044\u914d\u5217\u3092\u7528\u610f\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u5341\u5206\u9577\u3044\u914d\u5217\u3068\u3057\u3066\u30b5\u30a4\u30ba1000\u306e\u914d\u5217\u3092\u7528\u610f\u3057\u3066\u3001\u521d\u3081\u30dd\u30a4\u30f3\u30bf\u306f500\u756a\u76ee\u306e\u8981\u7d20\u3092\u6307\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u3057\u3088\u3046\u3002 python\u30671\u6587\u5b57\u5358\u4f4d\u306e\u6a19\u6e96\u5165\u51fa\u529b\u3092\u3059\u308b\u3068\u304d\u306f sys.stdin.read , sys.stdout.write \u3092\u4f7f\u304a\u3046\u3002 \u4ee5\u4e0b\u306bBF\u30af\u30e9\u30b9\u306e\u5b9f\u88c5\u3092\u6319\u3052\u308b\u3002\u3044\u304f\u3064\u304b\u306e\u6a5f\u80fd\u3092\u672a\u5b9f\u88c5\u306b\u6e08\u307e\u305b\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u3053\u306f\u5404\u81ea\u3067\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3046\u3002 class BF : def __init__ ( self , sourcecode ): self . src = sourcecode self . reader = 0 #\u4eca\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u4f55\u6587\u5b57\u76ee\u3092\u898b\u3066\u3044\u308b\u304b self . memory = [ 0 ] * 1000 self . pointer = 500 def run ( self ): while self . reader < len ( self . src ): c = self . src [ self . reader ] if c == '>' : self . right () if c == '<' : self . left () if c == '+' : self . plus () if c == '-' : self . minus () if c == '.' : self . dot () if c == ',' : self . comma () if c == '[' : self . bra () if c == ']' : self . cket () self . reader += 1 def right ( self ): self . pointer += 1 def left ( self ): #\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b pass def plus ( self ): self . memory [ self . pointer ] += 1 def minus ( self ): #\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b pass def dot ( self ): sys . stdout . write ( chr ( self . memory [ self . pointer ])) def comma ( self ): #\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b pass def bra ( self ): if self . memory [ self . pointer ] != 0 : return bracket = 1 while self . reader < len ( self . src ) and bracket > 0 : self . reader += 1 if self . src [ self . reader ] == '[' : bracket += 1 if self . src [ self . reader ] == ']' : bracket -= 1 if bracket != 0 : print ( \"bracket is broken\" ) exit ( 0 ) def cket ( self ): #\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b pass \u4ee5\u4e0b\u306eBrainF**k\u306e\u30b3\u30fc\u30c9\u306fHello World\u3092\u51fa\u529b\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3042\u308b\u3002 \u5b9f\u884c\u3057\u3066\u3001\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u304c\u3057\u3063\u304b\u308a\u52d5\u3044\u3066\u3044\u308b\u304b\u78ba\u304b\u3081\u3066\u307f\u3088\u3046\u3002 >+++++++++[<++++++++>-]<.>+++++++[<++++>-]<+.+++++++..+++.[-]>++++++++[<++++>-]<.>+++++++++++[<+++++>-]<.>++++++++[<+++>-]<.+++.------.--------.[-]>++++++++[<++++>-]<+.[-]++++++++++. \u3082\u3057\u4f59\u529b\u304c\u3042\u3063\u305f\u3089\u3001BrainF**k\u3067\u5165\u529b\u3055\u308c\u305f\u6570\u5b57\u306e\u548c\u3092\u51fa\u529b\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306a\u3069\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3002\u3068\u3066\u3082\u96e3\u3057\u3044\u3053\u3068\u304c\u308f\u304b\u308b\u3002 \u69cb\u6587\u89e3\u6790 HQ9+\u3082BrainF**k\u3082\u5927\u3057\u3066\u96e3\u3057\u3044\u69cb\u6587\u89e3\u6790\u306f\u884c\u308f\u306a\u304b\u3063\u305f\u3002\u4eba\u9593\u304c\u8aad\u307f\u3084\u3059\u3044\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306f\u3001\u591a\u5c11\u9ad8\u5ea6\u306a\u69cb\u6587\u89e3\u6790\u3092\u884c\u308f\u306a\u3051\u308c\u3070\u30b3\u30fc\u30c9\u89e3\u91c8\u304c\u3067\u304d\u306a\u3044\u3002 \u69cb\u6587\u89e3\u6790\u306e\u7df4\u7fd2\u3068\u3057\u3066\u4ee5\u4e0b\u306e\u6a5f\u80fd\u3092\u6301\u3064\u5bfe\u8a71\u578b\u30b7\u30a7\u30eb\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3002 \u56db\u5247\u6f14\u7b97\u304c\u51e6\u7406\u3067\u304d\u308b\u3002\u305f\u3060\u3057\u5de6\u304b\u3089\u9806\u306b\u8a08\u7b97\u3059\u308b\u512a\u5148\u9806\u4f4d\u3067\u3042\u308b\u3002\u62ec\u5f27\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044 \u5909\u6570\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u3002 \u6570\u5f0f\u30921\u884c\u5165\u529b\u3057\u3066\u30a8\u30f3\u30bf\u30fc\u3092\u62bc\u3059\u3068\u3001\u305d\u308c\u3092\u8a08\u7b97\u3057\u3001\u6210\u529f\u3059\u308c\u3070\u7d50\u679c\u3092\u51fa\u529b\u3057\u3001\u5931\u6557\u3059\u308c\u3070\u30a8\u30e9\u30fc\u3092\u5410\u304f x = 3 \u3068\u3044\u3046\u3075\u3046\u306b (\u5909\u6570\u540d) = (\u5024) \u3068\u3059\u308b\u3068\u5909\u6570\u3092\u5ba3\u8a00\u3057\u305f\u308a\u3001\u5024\u3092\u8a2d\u5b9a\u3057\u305f\u308a\u3067\u304d\u308b\u3002 \u3053\u3053\u3067\u3001\u3069\u306e\u3088\u3046\u306a\u5165\u529b\u304c\u69cb\u6587\u3068\u3057\u3066\u6b63\u3057\u3044\u3044\u306e\u304b\u3092\u793a\u3059\u305f\u3081\u306b\u3001BNF\u3068\u3044\u3046\u8868\u8a18\u3092\u5c0e\u5165\u3059\u308b\u3002\u3053\u308c\u304b\u3089\u5b9f\u88c5\u3059\u308b\u8a00\u8a9e\u306e\u6b63\u5f53\u306a1\u884c\u306e\u547d\u4ee4\u306b\u5bfe\u5fdc\u3059\u308bBNF\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002 <command> ::= <substitute> | <formula> <substitute> ::= <variable> '=' <formula> <formula> ::= \u3000\u3000<number> '+' <formula> | <number> '*' <formula> | <number> '-' <formula> | <number> '/' <formula> | <number> <number> ::= <constant> | <variable> <variable> ::= <alphabet> | <alphabet> <variable> <alphabet> ::= 'a' | 'b' | .. | 'z' <constant> ::= <digit> | <digit> <constant> <digit> ::= '0' | '1' | '2' | .. | '9' BNF\u306e\u8a18\u6cd5\u306f ::= \u306e\u5de6\u306e\u30d1\u30bf\u30fc\u30f3\u304c\u53f3\u306b\u66f8\u3044\u305f\u30d1\u30bf\u30fc\u30f3\u3068\u30de\u30c3\u30c1\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u3002 \u305f\u3068\u3048\u3070\u6700\u5f8c\u306e\u4e00\u884c\u306f\u3001 \u306f'0'\u3084'1'\u306a\u3069\u306e\u4e00\u6587\u5b57\u306e\u6570\u5b57\u306b\u30de\u30c3\u30c1\u3059\u308b\u3053\u3068\u3092\u8868\u3057\u3066\u3044\u308b\u3002 \u6700\u5f8c\u304b\u3089\u4e8c\u884c\u76ee\u306f \u306f \u5358\u4f53\u3082\u3057\u304f\u306f \u306e\u3042\u3068\u306b \u304c\u6765\u308b\u3082\u306e\u3068\u30de\u30c3\u30c1\u3059\u308b\u3053\u3068\u3092\u8868\u3057\u3066\u3044\u308b\u3002 \u3053\u308c\u306f\u3064\u307e\u308a \u304c1\u3064\u4ee5\u4e0a\u4e26\u3093\u3060\u3082\u306e\u304c \u3067\u3042\u308b\u3053\u3068\u3092\u8868\u3057\u3066\u3044\u308b\u3002 \u4e0a\u306eBNF\u8a18\u6cd5\u3067\u66f8\u304b\u308c\u305f\u6587\u6cd5\u306e\u4ed5\u69d8\u306b\u5247\u3063\u3066\u3001\u307e\u305a\u306f\u69cb\u6587\u89e3\u6790\u5668\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3002 \u69cb\u6587\u89e3\u6790\u306e\u5b9f\u88c5 \u307e\u305a\u306f\u6587\u5b57\u5217\u304c\u4e0e\u3048\u3089\u308c\u305f\u6642\u306b\u3001\u5148\u982d\u306e\u6574\u6570\u3060\u3051\u53d6\u308a\u51fa\u3057\u3066\u3001\u6b8b\u308a\u3068\u5206\u96e2\u3059\u308b\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3046\u3002 DIGITS = \"0123456789\" def read_constant ( string ): i = 0 while i < len ( string ) and string [ i ] in DIGITS : i += 1 return int ( string [: i ]), string [ i :] \u4e00\u6587\u5b57\u76ee\u304b\u3089\u9806\u756a\u306b\u898b\u3066\u3044\u3063\u3066\u3001\u6570\u5b57\u3067\u306f\u306a\u304f\u306a\u308b\u3068\u3053\u308d\u307e\u3067\u5168\u90e8\u53d6\u3063\u3066\u3001\u6574\u6570\u3068\u3057\u3066\u8aad\u307f\u8fbc\u307f\u3068\u3044\u3046\u30b3\u30fc\u30c9\u3067\u3042\u308b\u3002 \u6b21\u306b <number> \u3092\u51e6\u7406\u3059\u308b\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u3088\u3046\u3002 read_number(string) \u3068\u3059\u308b\u3068'string'\u306e\u5148\u982d\u304b\u3089\u3001\u6574\u6570\u3082\u3057\u304f\u306f\u5909\u6570\u3092\u8aad\u307f\u53d6\u3063\u3066\u3001\u6b8b\u308a\u3068\u5206\u96e2\u3059\u308b\u95a2\u6570\u3067\u3042\u308b\u3002 def error ( message ): print ( message ) exit ( 0 ) def read_number ( string ): string = string . strip () if string == \"\" : error ( \"syntax_error\" ) if string [ 0 ] in DIGITS : return read_constant ( string ) if string [ 0 ] in ALPHABETS : return read_variable ( string ) error ( \"syntax_error\" ) \u3053\u306e\u6b21\u306f <formula> \u3092\u51e6\u7406\u3059\u308b\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u3088\u3046\u3002 read_formula(string) \u3068\u3059\u308b\u3068 string \u3092\u5f0f\u3068\u3057\u3066\u89e3\u91c8\u3057\u3066\u305d\u306e\u8a08\u7b97\u7d50\u679c\u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u3088\u3046\u3002 env = {} def read_formula ( string ): string = string . strip () num , rest = read_number ( string ) if type ( num ) == str : if num not in env : error ( \"no such variable {} \" . format ( num )) num = env [ num ] if rest == \"\" : return num rest = rest . strip () if rest [ 0 ] == '+' : return num + read_formula ( rest [ 1 :]) if rest [ 0 ] == '*' : #\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b pass if rest [ 0 ] == '-' : #\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b pass if rest [ 0 ] == '/' : #\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b pass error ( \"syntax_error\" ) \u3053\u3053\u3067, env \u306f\u9023\u60f3\u914d\u5217\u3067\u3001\u5c06\u6765\u7684\u306b\u306f\u5909\u6570\u540d\u3092\u30ad\u30fc\u3068\u3057\u3066\u3001\u305d\u306e\u5909\u6570\u306e\u5024\u3092\u683c\u7d0d\u3059\u308b\u3082\u306e\u3067\u3042\u308b\u3002env\u306fenvironment(\u74b0\u5883)\u306e\u7565\u3067\u3001\u73fe\u5728\u306e\u5909\u6570\u306e\u72b6\u6cc1\u3092\u7ba1\u7406\u3057\u3066\u3044\u308b\u3082\u306e\u3068\u8003\u3048\u3066\u3082\u3089\u3063\u3066\u826f\u3044\u3002 \u6700\u5f8c\u306b\u3001command\u3092\u5b9f\u88c5\u3059\u308c\u3070\u5909\u6570\u3092\u4f7f\u308f\u305a\u4ee3\u5165\u3082\u305b\u305a\u8db3\u3057\u7b97\u3057\u304b\u3067\u304d\u306a\u3044\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u304c\u5b8c\u6210\u3059\u308b\u306f\u305a\u3060\u3002 def read_command ( string ): if '=' in string : var = read_substitute ( string ) print ( \"set {} \" . format ( var )) else : print ( read_formula ( string )) while True : read_command ( input ()) \u3053\u3053\u3067\u306f'='\u304c\u542b\u307e\u308c\u3066\u3044\u308c\u3070\u4ee3\u5165\u5206\u3067\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u305f\u3060\u306e\u5f0f\u3060\u3068\u5224\u5b9a\u3057\u3066\u3044\u308b\u3002 \u3053\u3053\u307e\u3067\u306e\u3082\u306e\u3068\u3001\u3053\u308c\u304b\u3089\u5b9f\u88c5\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3082\u306e\u3092\u307e\u3068\u3081\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002 DIGITS = \"0123456789\" ALPHABETS = \"abcdefghijklmnopqrstuvwxyz\" env = {} def error ( message ): print ( message ) exit ( 0 ) def read_number ( string ): string = string . strip () if string == \"\" : error ( \"syntax_error\" ) if string [ 0 ] in DIGITS : return read_constant ( string ) if string [ 0 ] in ALPHABETS : return read_variable ( string ) error ( \"syntax_error\" ) def read_constant ( string ): i = 0 while i < len ( string ) and string [ i ] in DIGITS : i += 1 return int ( string [: i ]), string [ i :] def read_variable ( string ): #\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b pass def read_formula ( string ): string = string . strip () num , rest = read_number ( string ) if type ( num ) == str : if num not in env : error ( \"no such variable {} \" . format ( num )) num = env [ num ] if rest == \"\" : return num rest = rest . strip () if rest [ 0 ] == '+' : return num + read_formula ( rest [ 1 :]) if rest [ 0 ] == '*' : #\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b pass if rest [ 0 ] == '-' : #\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b pass if rest [ 0 ] == '/' : #\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b pass error ( \"syntax_error\" ) def read_substitute ( string ): string . strip () var , rest = read_variable ( string ) rest = rest . strip () if rest [ 0 ] != '=' : error ( \"syntax_error\" ) env [ var ] = read_formula ( rest [ 1 :]) return var def read_command ( string ): if '=' in string : var = read_substitute ( string ) print ( \"set {} \" . format ( var )) else : print ( read_formula ( string )) while True : read_command ( input ()) \u3053\u306e\u307e\u307e\u3067\u306f\u8db3\u3057\u7b97\u3057\u304b\u3067\u304d\u306a\u3044\u306e\u3067\u3001 #\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b \u3068\u66f8\u3044\u3066\u3042\u308b\u5834\u6240\u3092\u57cb\u3081\u3066\u3001\u5909\u6570\u3084\u4ed6\u306e\u6f14\u7b97\u5b50\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u3088\u3046\u306b\u3057\u3088\u3046\u3002","title":"\u8a00\u8a9e\u51e6\u7406\u7cfb"},{"location":"lang_processor/#_1","text":"\u8a00\u8a9e\u51e6\u7406\u7cfb \u3068\u3044\u3046\u306e\u306f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3092\u53d7\u3051\u53d6\u3063\u3066\u3001\u4f55\u3089\u304b\u306e\u51e6\u7406\u3092\u3057\u3066\u304f\u308c\u308b\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306e\u3053\u3068\u3067\u3042\u308b\u3002Processing, Python, C/C++\u306a\u3069\u69d8\u3005\u306a\u8a00\u8a9e\u304c\u3042\u308b\u304c\u3001\u4eba\u9593\u304c\u66f8\u3044\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304c\u7121\u4e8b\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u3057\u3066\u5b9f\u884c\u3055\u308c\u308b\u307e\u3067\u306b\u306f\u3001\u8a00\u8a9e\u51e6\u7406\u7cfb\u304c\u9593\u306b\u631f\u307e\u3063\u3066\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u89e3\u91c8\u3084\u3001\u6a5f\u68b0\u8a9e\u3078\u306e\u5909\u63db\u3092\u884c\u3063\u3066\u3044\u308b\u3002 \u672c\u30c6\u30fc\u30de\u3067\u306f\u3001\u3044\u308d\u3044\u308d\u306a\u30bf\u30a4\u30d7\u306e\u8a00\u8a9e\u51e6\u7406\u7cfb\u3092\u4f5c\u3063\u3066\u307f\u3066\u3001\u6700\u7d42\u7684\u306b\u306f\u3072\u3068\u3064\u8a00\u8a9e\u3092\u81ea\u4f5c\u3059\u308b\u306a\u3069\u3057\u3066\u3082\u3089\u3046\u3002 \u3053\u306e\u30da\u30fc\u30b8\u3067\u306f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u5168\u3066Python3\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u304c\u3001\u53d7\u8b1b\u8005\u304c\u597d\u304d\u306a\u8a00\u8a9e\u3092\u4f7f\u3063\u3066\u3082\u3089\u3063\u3066\u69cb\u308f\u306a\u3044\u3002","title":"\u8a00\u8a9e\u51e6\u7406\u7cfb"},{"location":"lang_processor/#_2","text":"\u8a00\u8a9e\u51e6\u7406\u7cfb\u306f \u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u578b \u3068 \u30b3\u30f3\u30d1\u30a4\u30e9\u578b \u306b\u5927\u5225\u3055\u308c\u308b\u3002 \u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u578b\u8a00\u8a9e\u306f\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u6a5f\u68b0\u8a9e\u306b\u7ffb\u8a33\u305b\u305a\u306b\u5b9f\u884c\u3059\u308b\u8a00\u8a9e\u51e6\u7406\u7cfb\u3067\u3042\u308b\u3002Python, Ruby\u306a\u3069\u304c\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u578b\u8a00\u8a9e\u306e\u4f8b\u3067\u3042\u308b\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4e0a\u304b\u3089\u9806\u756a\u306b\u8aad\u3093\u3067\u3044\u3063\u3066\u9010\u4e00\u5b9f\u884c\u3059\u308b\u3060\u3051\u3001\u3068\u3044\u3046\u5b9f\u88c5\u304c\u591a\u3044\u306e\u3067\u3001\u5bfe\u8a71\u578b\u30b3\u30f3\u30bd\u30fc\u30eb\u3068\u306e\u76f8\u6027\u304c\u3088\u3044\u3002 \u305d\u308c\u306b\u5bfe\u3057\u3066\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u578b\u8a00\u8a9e\u306f\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u4e00\u5ea6\u6a5f\u68b0\u8a9e\u306b\u5909\u63db\u3057\u3066\u304b\u3089\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3002\u4e00\u822c\u306b\u306f\u6a5f\u68b0\u8a9e\u306b\u5909\u63db\u3059\u308b\u3068\u3053\u308d\u307e\u3067\u304c\u30b3\u30f3\u30d1\u30a4\u30e9\u578b\u8a00\u8a9e\u51e6\u7406\u7cfb\u306e\u4ed5\u4e8b\u3067\u3042\u308b\u3002\u4f8b\u3048\u3070C\u8a00\u8a9e\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3068a.exe\u306a\u3069\u3068\u8a00\u3063\u305f\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u51fa\u6765\u4e0a\u304c\u308b\u304c\u3001\u3053\u308c\u304c\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304c\u6a5f\u68b0\u8a9e\u306b\u7ffb\u8a33\u3055\u308c\u305f\u3082\u306e\u3067\u3042\u308b\u3002 \u6a5f\u68b0\u8a9e\u306b\u5909\u63db\u3059\u308b\u307e\u3067\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u304c\u3001\u305d\u306e\u5f8c\u306e\u5b9f\u884c\u901f\u5ea6\u306f\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u578b\u3068\u6bd4\u8f03\u3059\u308b\u3068\u901f\u304f\u306a\u308b\u3002 \u30b3\u30f3\u30d1\u30a4\u30eb\u578b\u539f\u7881\u3092\u81ea\u4f5c\u3059\u308b\u5834\u5408\u306f\u6a5f\u68b0\u8a9e\u306e\u77e5\u8b58\u304c\u5fc5\u8981\u3067\u3001\u5c11\u3057\u96e3\u3057\u3044\u306e\u3067\u3001\u4eca\u56de\u306f\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u578b\u8a00\u8a9e\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u306b\u3059\u308b\u3002","title":"\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3068\u30b3\u30f3\u30d1\u30a4\u30e9"},{"location":"lang_processor/#hq9","text":"\u307e\u305a\u306f HQ9+ \u3068\u3044\u3046\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306e\u51e6\u7406\u7cfb\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3002 HQ9+\u306f\u307b\u3068\u3093\u3069\u4f55\u3082\u3067\u304d\u306a\u3044\u30b8\u30e7\u30fc\u30af\u8a00\u8a9e\u3060\u304c\u3001\u51e6\u7406\u7cfb\u3092\u4f5c\u308b\u7df4\u7fd2\u3068\u3057\u3066\u9078\u3076\u306b\u306f\u826f\u3044\u8a00\u8a9e\u3067\u3042\u308b\u3002","title":"HQ9+"},{"location":"lang_processor/#hq9_1","text":"HQ9+\u306e\u4ed5\u69d8\u3092\u4ee5\u4e0b\u306b\u6319\u3052\u308b\u3002 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u5148\u982d\u304b\u3089\u9806\u306b\u8aad\u3093\u3067\u3044\u304f\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u578b\u8a00\u8a9e\u3067\u3042\u308b\u3002 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u3044\u304d'H'\u304c\u51fa\u3066\u304d\u305f\u3089\u3001'Hello, World!'\u3092\u51fa\u529b\u3059\u308b\u3002 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u3044\u304d'Q'\u304c\u51fa\u3066\u304d\u305f\u3089\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u51fa\u529b\u3059\u308b\u3002 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u3044\u304d'9'\u304c\u51fa\u3066\u304d\u305f\u3089\u3001\"99 Bottles of Beer\"\u306e \u6b4c\u8a5e \u3092\u51fa\u529b\u3059\u308b\u3002 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u3044\u304d'+'\u304c\u51fa\u3066\u304d\u305f\u3089\u3001\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u306e\u5024\u30921\u5897\u3084\u3059\u3002 \u305d\u308c\u4ee5\u5916\u306e\u6587\u5b57\u304c\u51fa\u3066\u304d\u305f\u5834\u5408\u306f\u3001\u4f55\u3082\u3057\u306a\u3044\u3002 \u3053\u3053\u3067\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u3068\u3044\u3046\u306e\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u88cf\u5074\u306b\u3042\u308b\u5909\u6570\u3060\u3068\u601d\u3063\u3066\u3082\u3089\u3048\u308c\u3070\u826f\u3044\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u958b\u59cb\u6642\u306b\u306f\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u306f0\u306b\u521d\u671f\u5316\u3055\u308c\u3066\u3044\u308b\u3002 \u3053\u306e\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u306e\u5024\u3092\u51fa\u529b\u3059\u308b\u3053\u3068\u306f\u306a\u3044\u306e\u3067\u3001\u5b9f\u969b\u306b\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u3092\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u306e\u3060\u304c\u3001\u7df4\u7fd2\u306e\u305f\u3081\u306b\u4eca\u56de\u306f\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3046\u3002","title":"HQ9+ \u306e\u4ed5\u69d8"},{"location":"lang_processor/#hq9_2","text":"\u307e\u305a\u96db\u5f62\u3068\u3057\u3066\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u307f\u53d6\u308b\u95a2\u6570 read_code \u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3002 \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u304b\u3089\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u30d1\u30b9\u3092\u8aad\u307f\u53d6\u308a\u3001\u305d\u306e\u5185\u5bb9\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3042\u308b\u3002 \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306e\u500b\u6570\u304c\u304a\u304b\u3057\u304b\u3063\u305f\u308a\u3001\u4e0e\u3048\u3089\u308c\u305f\u30d1\u30b9\u304c\u5b58\u5728\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u3082\u9069\u5207\u306b\u30a8\u30e9\u30fc\u51e6\u7406\u3092\u3059\u308b\u3002 sys.argv \u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306e\u914d\u5217\u3067\u3042\u308b\u3002 python hoge.py fuga piyo \u3068\u3044\u3046\u3075\u3046\u306b hoge.py \u3092\u5b9f\u884c\u3057\u305f\u306a\u3089\u3070 sys.argv \u306f [\"hoge.py\", \"fuga\", \"piyo\"] \u3068\u306a\u308b\u3002 import sys import os.path argvs = sys . argv argc = len ( argvs ) def read_code (): if argc == 1 : print ( \"no source file\" ) exit () if argc > 2 : print ( \"too many arguments\" ) exit () filename = argvs [ 1 ] if not os . path . exists ( filename ): print ( \"no such file: {} \" . format ( filename )) exit () with open ( filename , \"r\" ) as f : sourcecode = f . read () return sourcecode \u3053\u306e\u96db\u5f62\u306f\u4ed6\u306e\u8a00\u8a9e\u3092\u4f5c\u308b\u3068\u304d\u306b\u3082\u5229\u7528\u3059\u308b\u306e\u3067\u30ed\u30fc\u30ab\u30eb\u306b\u540d\u524d\u3092\u4ed8\u3051\u3066\u4fdd\u5b58\u3057\u3066\u304a\u304f\u3068\u826f\u3044\u3060\u308d\u3046\u3002 \u6b21\u306b\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u9806\u306b\u8aad\u307f\u3001\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u3044\u304f\u95a2\u6570 process(sourcecode) \u3092\u66f8\u3053\u3046\u3002\u5404\u30b3\u30de\u30f3\u30c9\u306e\u51e6\u7406\u306f\u307e\u3060\u5177\u4f53\u7684\u306b\u66f8\u304b\u305a\u3001\u95a2\u6570\u306e\u5f62\u3067\u7f6e\u3044\u3066\u304a\u304f\u3002 def process ( sourcecode ): accumulator = 0 for c in sourcecode : if c == 'H' : command_h () if c == 'Q' : command_q ( sourcecode ) if c == '9' : command_9 () if c == '+' : command_plus () \u3042\u3068\u306f\u3001\u305d\u308c\u305e\u308c\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\u3060\u3051\u3067\u3042\u308b\u3002\u3053\u3053\u3067\u306fH\u3068+\u306e\u5b9f\u88c5\u4f8b\u3092\u793a\u3059\u306e\u3067\u3001\u6b8b\u308a\u306e2\u30b3\u30de\u30f3\u30c9\u306f\u81ea\u5206\u3067\u5b9f\u88c5\u3057\u3066\u307f\u3066\u307b\u3057\u3044\u3002 def command_h (): print ( \"Hello, World!\" ) def command_plus (): global accumulator accumulator += 1 def command_9 (): #\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b pass def command_q ( sourcecode ): #\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b pass \u3053\u308c\u3089\u3092\u5b9f\u88c5\u3057\u7d42\u308f\u3063\u305f\u3042\u3068\u306f\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u6700\u5f8c\u306b\u8ffd\u52a0\u3059\u308c\u3070\u3001\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002 def main (): sourcecode = read_code () process ( sourcecode ) if __name__ == \"__main__\" : main ()","title":"HQ9+ \u306e\u5b9f\u88c5"},{"location":"lang_processor/#_3","text":"HQ9+\u306f\u898b\u3066\u306e\u901a\u308a\u4f4e\u6a5f\u80fd\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3067\u3042\u308b\u3002\u3053\u3053\u306b\u81ea\u5206\u306e\u597d\u304d\u306a\u30b3\u30de\u30f3\u30c9\u3092\u8ffd\u52a0\u3057\u3066\u307f\u3088\u3046\u3002\u4ee5\u4e0b\u306b\u6319\u3052\u308b\u306e\u306f\u8b1b\u5e2b\u304c\u601d\u3044\u3064\u3044\u305f\u4f8b\u3067\u3042\u308b\u304c\u3001\u3053\u3053\u306b\u306a\u3044\u3082\u306e\u3067\u3082\u3088\u3044\u3002 F\u30b3\u30de\u30f3\u30c9: 1\u304b\u3089100\u307e\u3067\u306eFizzBuzz\u3092\u51fa\u529b\u3059\u308b O\u30b3\u30de\u30f3\u30c9\uff1a\u30a2\u30ad\u30e5\u30df\u30e5\u30ec\u30fc\u30bf\u306e\u5024\u3092\u51fa\u529b\u3059\u308b -\u30b3\u30de\u30f3\u30c9\uff1a\u30a2\u30ad\u30e5\u30df\u30e5\u30ec\u30fc\u30bf\u306e\u5024\u30921\u6e1b\u3089\u3059","title":"\u6f14\u7fd2:\u81ea\u4f5c\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u3066\u307f\u3088\u3046"},{"location":"lang_processor/#brainfk","text":"\u6b21\u306b\u3001HQ9+\u3088\u308a\u9ad8\u6a5f\u80fd\u306a BrainF**k \u306e\u5b9f\u88c5\u3092\u3057\u3066\u307f\u3088\u3046\u3002BrainF**k\u306f\u30c1\u30e5\u30fc\u30ea\u30f3\u30b0\u5b8c\u5168\u3068\u3044\u3063\u3066\u3001\u30c1\u30e5\u30fc\u30ea\u30f3\u30b0\u30de\u30b7\u30f3\u3068\u540c\u7b49\u306e\u51e6\u7406\u80fd\u529b\u304c\u6709\u308b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3067\u3042\u308b\u3002C/C++\u3084Python\u306e\u3088\u3046\u306a\u3001\u3044\u308f\u3086\u308b\u300c\u306a\u3093\u3067\u3082\u3067\u304d\u308b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u300d\u3060\u3068\u8003\u3048\u3066\u3082\u3089\u3063\u3066\u69cb\u308f\u306a\u3044\u3002","title":"BrainF**k"},{"location":"lang_processor/#brainfk_1","text":"BrainF**k\u306e\u4ed5\u69d8\u3092\u4ee5\u4e0b\u306b\u6319\u3052\u308b\u3002 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u5148\u982d\u304b\u3089\u9806\u306b\u8aad\u3093\u3067\u3044\u304f\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u578b\u8a00\u8a9e\u3067\u3042\u308b\u3002 '>'\u304c\u51fa\u3066\u304d\u305f\u3089\u3001\u30dd\u30a4\u30f3\u30bf\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u3002 '<'\u304c\u51fa\u3066\u304d\u305f\u3089\u3001\u30dd\u30a4\u30f3\u30bf\u3092\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u3002 '+'\u304c\u51fa\u3066\u304d\u305f\u3089\u3001\u30dd\u30a4\u30f3\u30bf\u304c\u6307\u3057\u3066\u3044\u308b\u5024\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u3002 '-'\u304c\u51fa\u3066\u304d\u305f\u3089\u3001\u30dd\u30a4\u30f3\u30bf\u304c\u6307\u3057\u3066\u3044\u308b\u5024\u3092\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u3002 '.'\u304c\u51fa\u3066\u304d\u305f\u3089\u3001\u30dd\u30a4\u30f3\u30bf\u304c\u6307\u3059\u5024\u306e\u6587\u5b57\u30b3\u30fc\u30c9\u3092\u6301\u3064\u6587\u5b57\u3092\u51fa\u529b\u3059\u308b\u3002 ','\u304c\u51fa\u3066\u304d\u305f\u3089\u3001\u5165\u529b\u304b\u30891\u6587\u5b57\u8aad\u307f\u8fbc\u3093\u3067\u3001\u305d\u306e\u6587\u5b57\u30b3\u30fc\u30c9\u306e\u5024\u3092\u30dd\u30a4\u30f3\u30bf\u304c\u6307\u3059\u5148\u306b\u4ee3\u5165\u3059\u308b\u3002 '['\u304c\u51fa\u3066\u304d\u305f\u3089\u3001\u30dd\u30a4\u30f3\u30bf\u304c\u6307\u3059\u5024\u304c0\u306a\u3089\u5bfe\u5fdc\u3059\u308b']'\u306b\u30b8\u30e3\u30f3\u30d7\u3059\u308b\u3002 ']'\u304c\u51fa\u3066\u304d\u305f\u3089\u3001\u30dd\u30a4\u30f3\u30bf\u304c\u6307\u3059\u5024\u304c0\u3067\u306a\u3044\u306a\u3089\u3001\u5bfe\u5fdc\u3059\u308b'['\u306b\u30b8\u30e3\u30f3\u30d7\u3059\u308b\u3002 \u305d\u308c\u4ee5\u5916\u306e\u6587\u5b57\u304c\u51fa\u3066\u304d\u305f\u5834\u5408\u306f\u3001\u4f55\u3082\u3057\u306a\u3044\u3002 \u4ed5\u69d8\u306b\u51fa\u3066\u304d\u305f\u300c\u30dd\u30a4\u30f3\u30bf\u300d\u3068\u3044\u3046\u5358\u8a9e\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u3088\u3046\u3002 HQ9+\u3067\u306f\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u3068\u3044\u3046\u5909\u6570\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u3042\u3063\u305f\u304c\u3001BrainF**k\u3067\u306f\u7121\u9650\u306b\u9577\u3044\u4e00\u6b21\u5143\u914d\u5217\u304c\u88cf\u306b\u3042\u308b\u3068\u8003\u3048\u3066\u3082\u3089\u3063\u3066\u3088\u3044\u3002 \u306f\u3058\u3081\u3001\u305d\u306e\u914d\u5217\u306e\u5024\u306f\u5168\u30660\u3067\u521d\u671f\u5316\u3055\u308c\u3066\u304a\u308a\u3001\u30dd\u30a4\u30f3\u30bf\u304c\u3042\u308b\u8981\u7d20\u3092\u6307\u3057\u3066\u3044\u308b\u3002 \u30dd\u30a4\u30f3\u30bf\u304c\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3055\u308c\u308b\u3068\u3001\u305d\u306e\u3072\u3064\u6b21\u306e\u8981\u7d20\u3092\u6307\u3059\u3088\u3046\u306b\u306a\u308a\u3001\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u3068\u3001\u305d\u306e\u4e00\u3064\u524d\u306e\u8981\u7d20\u3092\u6307\u3059\u3088\u3046\u306b\u306a\u308b\u3002 \u30dd\u30a4\u30f3\u30bf\u304c\u6307\u3059\u8981\u7d20\u306e\u5024\u3092\u5909\u3048\u305f\u3044\u306a\u3089\u3070'+'\u3084'-'\u3092\u4f7f\u3063\u3066\u5024\u3092\u66f8\u304d\u63db\u3048\u308b\u3002 \u307e\u305f\u3001'.',','\u3067\u30dd\u30a4\u30f3\u30bf\u306e\u6307\u3059\u5024\u306e\u6587\u5b57\u30b3\u30fc\u30c9\u306b\u5bfe\u5fdc\u3059\u308b\u6587\u5b57\u304c\u306a\u3044\u3068\u3046\u307e\u304f\u52d5\u304b\u306a\u3044\u306e\u3067\u3001'+'\u3084'-'\u30b3\u30de\u30f3\u30c9\u306f256\u3067\u5272\u3063\u305f\u3042\u307e\u308a\u3092\u52d5\u304f\u3068\u3059\u308b\u3002\u3064\u307e\u308a255\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u30680, 0\u3092\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u3068255\u306b\u306a\u308b\u4ed5\u69d8\u3067\u3042\u308b\u3068\u3059\u308b\u3002","title":"BrainF**k\u306e\u4ed5\u69d8"},{"location":"lang_processor/#brainfk_2","text":"read_code \u306fHQ9+\u3068\u540c\u3058\u3082\u306e\u3092\u4f7f\u3063\u3066\u69cb\u308f\u306a\u3044\u3002 HQ9+\u306e\u3068\u304d\u306f\u30a2\u30ad\u30e5\u30df\u30e5\u30ec\u30fc\u30bf\u3092\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3068\u3057\u3066\u5b9f\u88c5\u3057\u305f\u304c\u3001\u5b9f\u969b\u306b\u306f\u3053\u306e\u3088\u3046\u306a\u5b9f\u88c5\u306f\u3042\u307e\u308a\u7f8e\u3057\u304f\u306a\u3044\u3002\u4eca\u56de\u306fBF\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u3066\u3001\u5404\u30b3\u30de\u30f3\u30c9\u3084\u5185\u90e8\u74b0\u5883\u3092\u305d\u306e\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u3057\u3066\u5b9f\u88c5\u3057\u3088\u3046\u3002 \u5b9f\u969b\u306b\u7121\u9650\u306b\u9577\u3044\u914d\u5217\u3092\u7528\u610f\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u5341\u5206\u9577\u3044\u914d\u5217\u3068\u3057\u3066\u30b5\u30a4\u30ba1000\u306e\u914d\u5217\u3092\u7528\u610f\u3057\u3066\u3001\u521d\u3081\u30dd\u30a4\u30f3\u30bf\u306f500\u756a\u76ee\u306e\u8981\u7d20\u3092\u6307\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u3057\u3088\u3046\u3002 python\u30671\u6587\u5b57\u5358\u4f4d\u306e\u6a19\u6e96\u5165\u51fa\u529b\u3092\u3059\u308b\u3068\u304d\u306f sys.stdin.read , sys.stdout.write \u3092\u4f7f\u304a\u3046\u3002 \u4ee5\u4e0b\u306bBF\u30af\u30e9\u30b9\u306e\u5b9f\u88c5\u3092\u6319\u3052\u308b\u3002\u3044\u304f\u3064\u304b\u306e\u6a5f\u80fd\u3092\u672a\u5b9f\u88c5\u306b\u6e08\u307e\u305b\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u3053\u306f\u5404\u81ea\u3067\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3046\u3002 class BF : def __init__ ( self , sourcecode ): self . src = sourcecode self . reader = 0 #\u4eca\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u4f55\u6587\u5b57\u76ee\u3092\u898b\u3066\u3044\u308b\u304b self . memory = [ 0 ] * 1000 self . pointer = 500 def run ( self ): while self . reader < len ( self . src ): c = self . src [ self . reader ] if c == '>' : self . right () if c == '<' : self . left () if c == '+' : self . plus () if c == '-' : self . minus () if c == '.' : self . dot () if c == ',' : self . comma () if c == '[' : self . bra () if c == ']' : self . cket () self . reader += 1 def right ( self ): self . pointer += 1 def left ( self ): #\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b pass def plus ( self ): self . memory [ self . pointer ] += 1 def minus ( self ): #\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b pass def dot ( self ): sys . stdout . write ( chr ( self . memory [ self . pointer ])) def comma ( self ): #\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b pass def bra ( self ): if self . memory [ self . pointer ] != 0 : return bracket = 1 while self . reader < len ( self . src ) and bracket > 0 : self . reader += 1 if self . src [ self . reader ] == '[' : bracket += 1 if self . src [ self . reader ] == ']' : bracket -= 1 if bracket != 0 : print ( \"bracket is broken\" ) exit ( 0 ) def cket ( self ): #\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b pass \u4ee5\u4e0b\u306eBrainF**k\u306e\u30b3\u30fc\u30c9\u306fHello World\u3092\u51fa\u529b\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3042\u308b\u3002 \u5b9f\u884c\u3057\u3066\u3001\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u304c\u3057\u3063\u304b\u308a\u52d5\u3044\u3066\u3044\u308b\u304b\u78ba\u304b\u3081\u3066\u307f\u3088\u3046\u3002 >+++++++++[<++++++++>-]<.>+++++++[<++++>-]<+.+++++++..+++.[-]>++++++++[<++++>-]<.>+++++++++++[<+++++>-]<.>++++++++[<+++>-]<.+++.------.--------.[-]>++++++++[<++++>-]<+.[-]++++++++++. \u3082\u3057\u4f59\u529b\u304c\u3042\u3063\u305f\u3089\u3001BrainF**k\u3067\u5165\u529b\u3055\u308c\u305f\u6570\u5b57\u306e\u548c\u3092\u51fa\u529b\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306a\u3069\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3002\u3068\u3066\u3082\u96e3\u3057\u3044\u3053\u3068\u304c\u308f\u304b\u308b\u3002","title":"BrainF**k\u306e\u5b9f\u88c5"},{"location":"lang_processor/#_4","text":"HQ9+\u3082BrainF**k\u3082\u5927\u3057\u3066\u96e3\u3057\u3044\u69cb\u6587\u89e3\u6790\u306f\u884c\u308f\u306a\u304b\u3063\u305f\u3002\u4eba\u9593\u304c\u8aad\u307f\u3084\u3059\u3044\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306f\u3001\u591a\u5c11\u9ad8\u5ea6\u306a\u69cb\u6587\u89e3\u6790\u3092\u884c\u308f\u306a\u3051\u308c\u3070\u30b3\u30fc\u30c9\u89e3\u91c8\u304c\u3067\u304d\u306a\u3044\u3002 \u69cb\u6587\u89e3\u6790\u306e\u7df4\u7fd2\u3068\u3057\u3066\u4ee5\u4e0b\u306e\u6a5f\u80fd\u3092\u6301\u3064\u5bfe\u8a71\u578b\u30b7\u30a7\u30eb\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3002 \u56db\u5247\u6f14\u7b97\u304c\u51e6\u7406\u3067\u304d\u308b\u3002\u305f\u3060\u3057\u5de6\u304b\u3089\u9806\u306b\u8a08\u7b97\u3059\u308b\u512a\u5148\u9806\u4f4d\u3067\u3042\u308b\u3002\u62ec\u5f27\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044 \u5909\u6570\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u3002 \u6570\u5f0f\u30921\u884c\u5165\u529b\u3057\u3066\u30a8\u30f3\u30bf\u30fc\u3092\u62bc\u3059\u3068\u3001\u305d\u308c\u3092\u8a08\u7b97\u3057\u3001\u6210\u529f\u3059\u308c\u3070\u7d50\u679c\u3092\u51fa\u529b\u3057\u3001\u5931\u6557\u3059\u308c\u3070\u30a8\u30e9\u30fc\u3092\u5410\u304f x = 3 \u3068\u3044\u3046\u3075\u3046\u306b (\u5909\u6570\u540d) = (\u5024) \u3068\u3059\u308b\u3068\u5909\u6570\u3092\u5ba3\u8a00\u3057\u305f\u308a\u3001\u5024\u3092\u8a2d\u5b9a\u3057\u305f\u308a\u3067\u304d\u308b\u3002 \u3053\u3053\u3067\u3001\u3069\u306e\u3088\u3046\u306a\u5165\u529b\u304c\u69cb\u6587\u3068\u3057\u3066\u6b63\u3057\u3044\u3044\u306e\u304b\u3092\u793a\u3059\u305f\u3081\u306b\u3001BNF\u3068\u3044\u3046\u8868\u8a18\u3092\u5c0e\u5165\u3059\u308b\u3002\u3053\u308c\u304b\u3089\u5b9f\u88c5\u3059\u308b\u8a00\u8a9e\u306e\u6b63\u5f53\u306a1\u884c\u306e\u547d\u4ee4\u306b\u5bfe\u5fdc\u3059\u308bBNF\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002 <command> ::= <substitute> | <formula> <substitute> ::= <variable> '=' <formula> <formula> ::= \u3000\u3000<number> '+' <formula> | <number> '*' <formula> | <number> '-' <formula> | <number> '/' <formula> | <number> <number> ::= <constant> | <variable> <variable> ::= <alphabet> | <alphabet> <variable> <alphabet> ::= 'a' | 'b' | .. | 'z' <constant> ::= <digit> | <digit> <constant> <digit> ::= '0' | '1' | '2' | .. | '9' BNF\u306e\u8a18\u6cd5\u306f ::= \u306e\u5de6\u306e\u30d1\u30bf\u30fc\u30f3\u304c\u53f3\u306b\u66f8\u3044\u305f\u30d1\u30bf\u30fc\u30f3\u3068\u30de\u30c3\u30c1\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u3002 \u305f\u3068\u3048\u3070\u6700\u5f8c\u306e\u4e00\u884c\u306f\u3001 \u306f'0'\u3084'1'\u306a\u3069\u306e\u4e00\u6587\u5b57\u306e\u6570\u5b57\u306b\u30de\u30c3\u30c1\u3059\u308b\u3053\u3068\u3092\u8868\u3057\u3066\u3044\u308b\u3002 \u6700\u5f8c\u304b\u3089\u4e8c\u884c\u76ee\u306f \u306f \u5358\u4f53\u3082\u3057\u304f\u306f \u306e\u3042\u3068\u306b \u304c\u6765\u308b\u3082\u306e\u3068\u30de\u30c3\u30c1\u3059\u308b\u3053\u3068\u3092\u8868\u3057\u3066\u3044\u308b\u3002 \u3053\u308c\u306f\u3064\u307e\u308a \u304c1\u3064\u4ee5\u4e0a\u4e26\u3093\u3060\u3082\u306e\u304c \u3067\u3042\u308b\u3053\u3068\u3092\u8868\u3057\u3066\u3044\u308b\u3002 \u4e0a\u306eBNF\u8a18\u6cd5\u3067\u66f8\u304b\u308c\u305f\u6587\u6cd5\u306e\u4ed5\u69d8\u306b\u5247\u3063\u3066\u3001\u307e\u305a\u306f\u69cb\u6587\u89e3\u6790\u5668\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3002","title":"\u69cb\u6587\u89e3\u6790"},{"location":"lang_processor/#_5","text":"\u307e\u305a\u306f\u6587\u5b57\u5217\u304c\u4e0e\u3048\u3089\u308c\u305f\u6642\u306b\u3001\u5148\u982d\u306e\u6574\u6570\u3060\u3051\u53d6\u308a\u51fa\u3057\u3066\u3001\u6b8b\u308a\u3068\u5206\u96e2\u3059\u308b\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3046\u3002 DIGITS = \"0123456789\" def read_constant ( string ): i = 0 while i < len ( string ) and string [ i ] in DIGITS : i += 1 return int ( string [: i ]), string [ i :] \u4e00\u6587\u5b57\u76ee\u304b\u3089\u9806\u756a\u306b\u898b\u3066\u3044\u3063\u3066\u3001\u6570\u5b57\u3067\u306f\u306a\u304f\u306a\u308b\u3068\u3053\u308d\u307e\u3067\u5168\u90e8\u53d6\u3063\u3066\u3001\u6574\u6570\u3068\u3057\u3066\u8aad\u307f\u8fbc\u307f\u3068\u3044\u3046\u30b3\u30fc\u30c9\u3067\u3042\u308b\u3002 \u6b21\u306b <number> \u3092\u51e6\u7406\u3059\u308b\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u3088\u3046\u3002 read_number(string) \u3068\u3059\u308b\u3068'string'\u306e\u5148\u982d\u304b\u3089\u3001\u6574\u6570\u3082\u3057\u304f\u306f\u5909\u6570\u3092\u8aad\u307f\u53d6\u3063\u3066\u3001\u6b8b\u308a\u3068\u5206\u96e2\u3059\u308b\u95a2\u6570\u3067\u3042\u308b\u3002 def error ( message ): print ( message ) exit ( 0 ) def read_number ( string ): string = string . strip () if string == \"\" : error ( \"syntax_error\" ) if string [ 0 ] in DIGITS : return read_constant ( string ) if string [ 0 ] in ALPHABETS : return read_variable ( string ) error ( \"syntax_error\" ) \u3053\u306e\u6b21\u306f <formula> \u3092\u51e6\u7406\u3059\u308b\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u3088\u3046\u3002 read_formula(string) \u3068\u3059\u308b\u3068 string \u3092\u5f0f\u3068\u3057\u3066\u89e3\u91c8\u3057\u3066\u305d\u306e\u8a08\u7b97\u7d50\u679c\u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u3088\u3046\u3002 env = {} def read_formula ( string ): string = string . strip () num , rest = read_number ( string ) if type ( num ) == str : if num not in env : error ( \"no such variable {} \" . format ( num )) num = env [ num ] if rest == \"\" : return num rest = rest . strip () if rest [ 0 ] == '+' : return num + read_formula ( rest [ 1 :]) if rest [ 0 ] == '*' : #\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b pass if rest [ 0 ] == '-' : #\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b pass if rest [ 0 ] == '/' : #\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b pass error ( \"syntax_error\" ) \u3053\u3053\u3067, env \u306f\u9023\u60f3\u914d\u5217\u3067\u3001\u5c06\u6765\u7684\u306b\u306f\u5909\u6570\u540d\u3092\u30ad\u30fc\u3068\u3057\u3066\u3001\u305d\u306e\u5909\u6570\u306e\u5024\u3092\u683c\u7d0d\u3059\u308b\u3082\u306e\u3067\u3042\u308b\u3002env\u306fenvironment(\u74b0\u5883)\u306e\u7565\u3067\u3001\u73fe\u5728\u306e\u5909\u6570\u306e\u72b6\u6cc1\u3092\u7ba1\u7406\u3057\u3066\u3044\u308b\u3082\u306e\u3068\u8003\u3048\u3066\u3082\u3089\u3063\u3066\u826f\u3044\u3002 \u6700\u5f8c\u306b\u3001command\u3092\u5b9f\u88c5\u3059\u308c\u3070\u5909\u6570\u3092\u4f7f\u308f\u305a\u4ee3\u5165\u3082\u305b\u305a\u8db3\u3057\u7b97\u3057\u304b\u3067\u304d\u306a\u3044\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u304c\u5b8c\u6210\u3059\u308b\u306f\u305a\u3060\u3002 def read_command ( string ): if '=' in string : var = read_substitute ( string ) print ( \"set {} \" . format ( var )) else : print ( read_formula ( string )) while True : read_command ( input ()) \u3053\u3053\u3067\u306f'='\u304c\u542b\u307e\u308c\u3066\u3044\u308c\u3070\u4ee3\u5165\u5206\u3067\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u305f\u3060\u306e\u5f0f\u3060\u3068\u5224\u5b9a\u3057\u3066\u3044\u308b\u3002 \u3053\u3053\u307e\u3067\u306e\u3082\u306e\u3068\u3001\u3053\u308c\u304b\u3089\u5b9f\u88c5\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3082\u306e\u3092\u307e\u3068\u3081\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002 DIGITS = \"0123456789\" ALPHABETS = \"abcdefghijklmnopqrstuvwxyz\" env = {} def error ( message ): print ( message ) exit ( 0 ) def read_number ( string ): string = string . strip () if string == \"\" : error ( \"syntax_error\" ) if string [ 0 ] in DIGITS : return read_constant ( string ) if string [ 0 ] in ALPHABETS : return read_variable ( string ) error ( \"syntax_error\" ) def read_constant ( string ): i = 0 while i < len ( string ) and string [ i ] in DIGITS : i += 1 return int ( string [: i ]), string [ i :] def read_variable ( string ): #\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b pass def read_formula ( string ): string = string . strip () num , rest = read_number ( string ) if type ( num ) == str : if num not in env : error ( \"no such variable {} \" . format ( num )) num = env [ num ] if rest == \"\" : return num rest = rest . strip () if rest [ 0 ] == '+' : return num + read_formula ( rest [ 1 :]) if rest [ 0 ] == '*' : #\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b pass if rest [ 0 ] == '-' : #\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b pass if rest [ 0 ] == '/' : #\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b pass error ( \"syntax_error\" ) def read_substitute ( string ): string . strip () var , rest = read_variable ( string ) rest = rest . strip () if rest [ 0 ] != '=' : error ( \"syntax_error\" ) env [ var ] = read_formula ( rest [ 1 :]) return var def read_command ( string ): if '=' in string : var = read_substitute ( string ) print ( \"set {} \" . format ( var )) else : print ( read_formula ( string )) while True : read_command ( input ()) \u3053\u306e\u307e\u307e\u3067\u306f\u8db3\u3057\u7b97\u3057\u304b\u3067\u304d\u306a\u3044\u306e\u3067\u3001 #\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b \u3068\u66f8\u3044\u3066\u3042\u308b\u5834\u6240\u3092\u57cb\u3081\u3066\u3001\u5909\u6570\u3084\u4ed6\u306e\u6f14\u7b97\u5b50\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u3088\u3046\u306b\u3057\u3088\u3046\u3002","title":"\u69cb\u6587\u89e3\u6790\u306e\u5b9f\u88c5"}]}